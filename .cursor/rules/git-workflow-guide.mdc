---
description: Git 工作流程與版本控制指南。當使用者下達「暫存進度」、「設定儲存點」、「上版」等指令時自動觸發，用於指導 AI 遵循「功能分支 -> WIP 提交 -> Squash 合併」的標準化流程，確保版本歷史清晰可控。
globs: 
alwaysApply: false
---
# Git 工作流程與 AI 協作指南

## 1. AI 協作模式：駕駛員與領航員
- **AI 是駕駛員**: 負責執行所有機械化的 Git 指令（建立分支、變基、合併、清理）。
- **使用者是領航員**: 負責制定方向（要開發什麼功能）和解決需要人類智慧的岔路口（合併衝突）。
- **核心原則**: AI 在遇到合併衝突時，**必須**暫停並請求領航員解決。解決後，由領航員下達「繼續」指令，AI 再接手完成後續流程。

## 2. 開發工作流程 (The Workflow)
### 階段一：開發與進度儲存 (Develop & Commit WIP)
- **觸發條件**: 使用者說「暫存進度」、「設定存檔點」或類似指令。
- **AI 動作 (自動化序列)**:
  1.  **情境判斷**: AI 必須先檢查當前所在分支。
      - **若已在功能分支**: 驗證通過，直接跳至第 3 步。
      - **若在 `next` 分支**: 此為新功能的隱性啟動信號，繼續執行下一步。
  2.  **自動建立分支**: AI 根據當前任務或變更，自動生成一個清晰的本地功能分支名 (例如 `feature/refine-git-workflow`)，並直接從最新的 `next` 分支建立與切換，**無需使用者確認**。
  3.  **建立提交**: 在功能分支上，自動建立一個 WIP (Work-In-Progress) commit。
  4.  **訊息格式**: 直接使用簡潔的中文描述來說明該次進度即可 (例如：`新增登入按鈕樣式`)。

### 階段二：整合與發布 (Squash & Publish)
- **觸發條件**: 在功能分支上，使用者說「請上版」、「正式上版」。
- **AI 動作 (全自動序列)**:
  1.  **同步**: `git fetch origin`，獲取遠端 `next` 分支的最新狀態。
  2.  **變基與整理**:
      - 執行 `git rebase -i origin/next`。AI 會預先準備好一個將所有 WIP commit 用 `fixup` 合併為一個的腳本，並**交由使用者最終確認**。
      - **若遇衝突，則進入領航員模式**。
  3.  **合併**: `git checkout next` 並 `git merge --ff-only <功能分支>`，確保線性歷史。
  4.  **推送與驗證**: `git push origin next`，並透過 `git lg -1` 驗證推送是否成功。若失敗則按規則重試。
  5.  **清理**: 刪除**本地**功能分支 (`git branch -d <功能分支>`)。由於功能分支僅存於本地，無需刪除遠端分支。
  6.  **報告**: `git status` 和 `git lg -3`，展示最終的乾淨狀態。

## 3. 正式提交訊息規範 (Formal Commit Message Convention)

### 3.1 格式概覽
- **結構**: `[type1, type2] Subject Part 1 | Subject Part 2`
- **範例**: `[docs, style] 更新 Git 工作流指南 | 調整提交訊息格式`

### 3.2 範疇 (Type) 定義
| 範疇 | 英文 | 核心職責 |
| :--- | :--- | :--- |
| 前端 | `front-end` | UI/UX 設計、頁面元件、前端互動邏輯 |
| 後端 | `back-end` | 核心業務 API、後端服務 |
| 整合 | `integration` | 同時涉及前後端 |
| 資料庫 | `database` | Schema 設計、資料遷移、索引優化 |
| 部署 | `deploy` | 雲端部署、容器化 (Docker)、CI/CD |
| 事務 | `chore` | 套件管理、框架與IDE設定、環境變數 |
| 文件 | `docs` | `.cursor/rules/*.mdc` 或 `README.md` 更新 |
| 格式 | `style` | 程式碼排版 |

### 3.3 格式細節
- **範疇 (Type)**:
  - 必須為英文，從上方表格中選取。
  - 若有多個範疇，使用逗號 `,` 分隔，並全部放在一個方括號 `[]` 內。
- **主題 (Subject)**:
  - **智慧化提煉**: AI 應分析功能分支上所有 WIP commit 的訊息，**提煉並總結**出幾個核心的修改主題，而不是簡單地將所有訊息全部串聯。應忽略無關緊要的微小變更 (如錯字修正、格式調整)。
  - **主題分隔**: 若有多個核心主題，使用 ` | ` (空格+豎線+空格) 進行分隔。
  - **格式規範**:
    - **句子式 (Sentence case)**: 句首單字大寫，其餘小寫，結尾必須有句點 `.`。
    - **標題式 (Title Case)**: 主要單字首字母大寫，不加句點。
  - **範例**:
    - `[docs, style] Refactor the git workflow guide and standardize commit formats.`
    - `[feature] Implement User Authentication via JWT`

## 4. 指令與別名參考
- **日誌檢查**: 本專案統一使用 `git lg`。
  ```bash
  # 顯示最近 3 筆美化日誌
  git lg -3
  ```
- **`git lg` 定義**:
  ```bash
  git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ```
- **常用指令**: `git status`, `git branch --show-current`