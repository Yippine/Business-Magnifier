---
description: Git 工作流程與版本控制指南。當使用者提及「上版」、「提交版本」、「commit」、「push」或要求執行 Git 發布相關操作時，優先調用此規則。用於查詢 commit message 格式與驗證、分支策略、自動化部署流程，及 AI 輔助版本控制。
globs: 
alwaysApply: false
---
# Git 工作流程與提交規範

## 1. Commit Message 核心規範

### 格式
- **單一範疇**: `[範疇] 描述內容`
- **多重範疇**: `[範疇1, 範疇2] 描述內容`

### 範疇 (Type) 定義
| 範疇 | 英文 | 核心職責 |
| :--- | :--- | :--- |
| 前端 | `[front-end]` | UI/UX 設計、頁面元件、前端互動邏輯 |
| 後端 | `[back-end]` | 核心業務 API、後端服務 |
| 整合 | `[integration]` | **同時涉及前後端**的開發 |
| 資料庫 | `[database]` | Schema 設計、資料遷移、索引優化 |
| 部署 | `[deploy]` | 雲端部署、容器化 (Docker)、CI/CD |
| 事務 | `[chore]` | 套件管理、框架與IDE設定、環境變數 |
| 文件 | `[docs]` | `.cursor/rules/*.mdc` 或 `README.md` 的更新 |
| 格式 | `[style]` | `npm run formatter` 執行後的程式碼排版 |

**重要原則**:
- **不使用**: `[refactor]`, `[perf]`, `[feature]`, `[fix]`, `[bug]`，應歸類至上述具體範疇。
- **`[style]` 獨立提交**: 格式化造成的變更應獨立上版，不與其他邏輯混合。

### 標題 (Subject) 撰寫規則
- **語言**: 必須使用**英文**。
- **格式**:
  - **標題 (Title Case)**: `Update Navigation Component` (不加句號)。
  - **句子 (Sentence case)**: `Fix the login validation issue.` (加句號)。
- **分隔符**:
  - 使用 `|` 分隔多個獨立功能。
  - `|` 兩側的描述各自遵循標題或句子格式。
  - **範例**: `[chore, deploy] Update Docker Configuration | Configure production environment variables.`

## 2. AI Commit Message 驗證流程
當使用者提供 commit message 時，AI 必須執行以下驗證：

1.  **範疇檢查**:
    - 驗證 `[範疇]` 是否為上方定義的 8 種之一。
    - 若使用已棄用的範疇 (如 `[feature]`) 或無效範疇，**必須停止操作**。
2.  **提供建議**:
    - **立即停止**: 不執行任何 git 指令。
    - **提供修正範例**: 提示正確的範疇，等待使用者確認。
    - **範例**:
      ```
      ❌ 發現問題：無效的範疇類型 [feature]
      💡 建議: [front-end] Add new search functionality.
      請提供修正後的 commit message。
      ```
3.  **長度忽略**: 合併多個小版本時，commit message 較長是正常現象，不需警告。

## 3. AI 輔助與自動化

### 自動生成 Commit
當使用者請求「幫我上版」時，AI 應：
1.  **分析變更**: 根據異動檔案路徑判斷主要範疇。
    - `/next/components/` -> `[front-end]`
    - `/next/api/` -> `[back-end]`
    - `.cursor/rules/` -> `[docs]`
    - `package.json`, `next.config.js` -> `[chore]`
    - `Dockerfile`, `netlify.toml` -> `[deploy]`
    - 前後端檔案皆有 -> `[integration]`
2.  **生成標題**: 參考歷史紀錄 (`git lg`) 風格，生成英文標題。
3.  **執行驗證**: 對自動生成的 message 執行上述驗證流程。

### 智能分支推送
1.  **檢查當前分支**: `git branch --show-current`
2.  **分析異動路徑**:
    - 若在 `next` 分支，目標永遠是 `origin/next`。
    - 若在 `main` 分支：
        - 如有改動 `next/` 內的檔案，**發出警告**，建議切換分支。
        - 否則，目標是 `origin/main`。

## 4. 流程與指令

### 標準上版流程
```bash
# 1. 檢查狀態
git status
# 2. 加入所有變更
git add .
# 3. 提交變更 (AI 會攔截並驗證 message)
git commit -m "[範疇] 描述內容"
# 4. 推送到遠端
git push origin <分支名>
# 5. 最終檢查
git lg -5
```

### 常用指令
```bash
# 查看美化版日誌 (lg 為自定義 alias)
git lg -10
# 查看狀態
git status
# 查看當前分支
git branch --show-current
```

## 5. 核心規則摘要
1.  **`integration` 定義**: 專指**同時涉及前後端程式碼**的變更，與目錄 (`legacy/`, `next/`) 無關。
2.  **配置優先**: 根目錄的設定檔 (`.js`, `.json`, `.toml`) 變更，優先使用 `[chore]`。
3.  **文件優先**: `.cursor/rules/*.mdc` 的變更，優先使用 `[docs]`。
4.  **歷史參考**: AI 生成標題時，應參考 `git lg` 的風格。