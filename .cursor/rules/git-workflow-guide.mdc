---
description: Git 工作流程與版本控制指南。當使用者下達「暫存進度」、「設定儲存點」、「上版」等指令時自動觸發，用於指導 AI 遵循「功能分支 -> WIP 提交 -> Squash 合併」的標準化流程，確保版本歷史清晰可控。
globs: 
alwaysApply: false
---
# Git 工作流程與 AI 協作指南

## 1. AI 協作模式：駕駛員與領航員
- **AI 是駕駛員**: 負責執行所有機械化的 Git 指令（建立分支、變基、合併、清理）。
- **使用者是領航員**: 負責制定方向（要開發什麼功能）和解決需要人類智慧的岔路口（合併衝突）。
- **核心原則**: AI 在遇到合併衝突時，**必須**暫停並請求領航員解決。解決後，由領航員下達「繼續」指令，AI 再接手完成後續流程。

## 2. 開發階段：WIP 提交 (Work-In-Progress)

在功能分支的開發過程中，AI 會以小步快跑的方式頻繁提交進度。

- **觸發時機**: 當使用者下達「儲存進度」、「建立儲存點」等模糊指令，或在一個階段性任務完成後。
- **提交方式**: 自動建立一個 WIP (Work-In-Progress) commit。
- **訊息格式**: **直接使用簡潔的中文描述**來說明該次進度即可，無需遵循正式格式。
  - *範例*: `新增登入按鈕樣式`
  - *範例*: `完成註冊表單驗證邏輯`

---

## 3. 合併階段：變基與正式提交

當功能開發完成，準備合併回 `next` 分支時，將執行變基 (Rebase) 與壓平 (Squash) 操作，將所有 WIP 提交合併為一個乾淨、有意義的正式提交。

### 3.1 執行變基
- **指令**: `git rebase -i origin/next`
- **AI 輔助**: AI 會預先準備好一個將所有 WIP commit 用 `fixup` 合併為一個的腳本，並**交由使用者最終確認**。
- **衝突處理**: 若遇衝突，則進入領航員模式，協助使用者解決。

### 3.2 撰寫正式提交訊息
- **🚨強制規範**: 在變基過程中，合併所有 WIP 提交後，**必須撰寫一則全新的、高品質的正式提交訊息**。
- **遵循格式**: 此訊息**必須嚴格遵循**下一章節定義的「**正式提交訊息規範 (Formal Commit Message Convention)**」。AI 會根據所有 WIP 提交的內容，草擬一則符合規範的訊息，供使用者審核修改。

---

## 4. 正式提交訊息規範 (Formal Commit Message Convention)

### 4.1 格式概覽
- **結構**: `[type1, type2] Subject Part 1 | Subject Part 2`
- **範例**: `[docs, style] 更新 Git 工作流指南 | 調整提交訊息格式`

### 4.2 範疇 (Type) 定義
| 範疇 | 英文 | 核心職責 |
| :--- | :--- | :--- |
| 前端 | `front-end` | UI/UX 設計、頁面元件、前端互動邏輯 |
| 後端 | `back-end` | 核心業務 API、後端服務 |
| 整合 | `integration` | 同時涉及前後端 |
| 資料庫 | `database` | Schema 設計、資料遷移、索引優化 |
| 部署 | `deploy` | 雲端部署、容器化 (Docker)、CI/CD |
| 事務 | `chore` | 套件管理、框架與IDE設定、環境變數 |
| 文件 | `docs` | `.cursor/rules/*.mdc` 或 `README.md` 更新 |
| 格式 | `style` | 程式碼排版 |

### 4.3 格式細節
- **範疇 (Type)**:
  - 必須為英文，從上方表格中選取。
  - 若有多個範疇，使用逗號 `,` 分隔，並全部放在一個方括號 `[]` 內。
- **主題 (Subject)**:
  - **智慧化提煉**: AI 應分析功能分支上所有 WIP commit 的訊息，**提煉並總結**出幾個核心的修改主題，而不是簡單地將所有訊息全部串聯。應忽略無關緊要的微小變更 (如錯字修正、格式調整)。
  - **主題分隔**: 若有多個核心主題，使用 ` | ` (空格+豎線+空格) 進行分隔。
  - **格式規範**:
    - **句子式 (Sentence case)**: 句首單字大寫，其餘小寫，結尾必須有句點 `.`。
    - **標題式 (Title Case)**: 主要單字首字母大寫，不加句點。
  - **範例**:
    - `[docs, style] Refactor the git workflow guide and standardize commit formats.`
    - `[feature] Implement User Authentication via JWT`

## 5. 指令與別名參考
- **日誌檢查**: 本專案統一使用 `git lg`。
  ```bash
  # 顯示最近 3 筆美化日誌
  git lg -3
  ```
- **`git lg` 定義**:
  ```bash
  git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ```
- **常用指令**: `git status`, `git branch --show-current`