---
description: Next.js 專案開發規範。用於查詢本專案的目錄結構、路由設計(含 App Router)、API 定義、組件組織、檔案命名慣例，或新功能如何參考現有實例。涉及架構一致性、SEO 整合與整體開發流程問題時調用。
globs: 
alwaysApply: false
---
# Next.js 專案開發規範

## 1. 專案概覽

- **定位**: 採用 Next.js 14 App Router 的 SEO 優化企業資料查詢平台。
- **核心原則**:
    - **架構一致性**: 維護統一的專案結構與設計模式。
    - **既有實現複刻**: 新功能開發需參照現有相似功能的實現，確保風格一致。
- **技術棧與現況**:
    - **主分支**: `next`
    - **資料庫**: MongoDB
    - **開發環境**: Docker
    - **程式碼品質**: ESLint + Prettier

---

## 2. 目錄結構

### 2.1 根目錄結構
`next/` 為主要開發目錄，`legacy/` 為舊版參考。
```
Business-Magnifier/
├── next/      # 主要 Next.js 應用
├── legacy/    # 舊版 Vite 應用 (參考用)
└── .cursor/   # AI 助手配置
```

### 2.2 `src` 目錄結構
採功能職責分層設計，確保程式碼職責清晰。
```
src/
├── app/         # App Router 頁面與 API 路由
├── components/  # React 元件 (UI, 業務邏輯)
├── lib/         # 核心函式庫 (資料庫, API 封裝, 業務邏輯)
├── hooks/       # 自定義 React Hooks
├── types/       # TypeScript 型別定義
├── utils/       # 通用工具函式
├── data/        # 靜態資料與配置
└── config/      # 應用程式配置
```

### 2.3 `app` 目錄與路由結構
採功能模組化組織，各功能 (如 `company`, `tender`, `aitool`) 自成模組。
```
app/
├── page.tsx          # 首頁 (重定向)
├── layout.tsx        # 根版面
├── loading.tsx       # 全域載入狀態
├── globals.css       # 全域樣式
├── company/          # 企業查詢模組
│   ├── search/       #   - 搜尋頁 (SSR)
│   └── [id]/         #   - 詳情頁 (ISR)
├── tender/           # 標案查詢模組
│   ├── search/       #   - 搜尋頁 (SSR)
│   └── [id]/         #   - 詳情頁 (ISR)
├── aitool/           # AI 工具模組
│   ├── search/       #   - 搜尋頁 (SSR)
│   └── detail/       #   - 詳情頁 (SSG)
├── api/              # API 路由
├── faq/              # 常見問題頁面 (SSG)
└── feedback/         # 使用者回饋頁面 (CSR)
```

---

## 3. 路由與渲染策略

### 3.1 頁面檔案慣例
- **頁面**: `page.tsx`
- **版面**: `layout.tsx`
- **載入**: `loading.tsx`
- **錯誤**: `error.tsx`
- **404**: `not-found.tsx`

### 3.2 路由結構
- **靜態路由**: `/company/search`, `/aitool/search`, `/faq`
- **動態路由**: `/company/[id]`, `/tender/[id]`, `/aitool/detail/[id]`

### 3.3 渲染策略
- **SSG (靜態生成)**: 內容不常變動的頁面 (FAQ, 隱私政策, AI 工具詳情頁)。
- **ISR (增量靜態再生)**: 熱門但需定期更新的頁面 (企業/標案詳情頁)。
- **SSR (伺服器端渲染)**: 需要即時資料的頁面 (搜尋結果頁)。
- **CSR (客戶端渲染)**: 高度互動的元件 (回饋表單, 複雜圖表)。

---

## 4. API 設計規範

### 4.1 API 路由結構 (`src/app/api/`)
API 路由依功能模組劃分，保持結構清晰。
```
api/
├── company/
│   ├── route.ts           # GET /api/company
│   └── [id]/route.ts      # GET /api/company/[id]
├── aitool/
│   ├── route.ts           # GET /api/aitool
│   ├── search/route.ts    # POST /api/aitool/search
│   └── [id]/route.ts      # GET /api/aitool/[id]
├── feedback/route.ts      # POST /api/feedback
└── health/route.ts        # GET /api/health
```

### 4.2 API 設計原則
- **RESTful**: 使用標準 HTTP 方法 (GET, POST, PUT/PATCH, DELETE)。
- **統一回應格式**: API 回應需遵循標準的成功與失敗結構，便於前端處理。
```typescript
// 成功回應
interface APIResponse<T> {
  success: true;
  data: T;
  message?: string;
  pagination?: object;
}

// 錯誤回應
interface APIError {
  success: false;
  error: string;
  code?: string;
}
```

---

## 5. 元件架構

### 5.1 元件目錄結構 (`src/components/`)
```
components/
├── ui/         # 基礎 UI 元件 (Button, Input)，無業務邏輯
├── layout/     # 版面配置元件 (Header, Footer)
├── business/   # 企業業務相關元件
├── aitool/     # AI 工具業務相關元件 (AIToolCard)
├── common/     # 通用功能元件 (Loading, ErrorBoundary)
└── seo/        # SEO 專用元件 (MetaTags, StructuredData)
```

### 5.2 元件設計與複用
- **分層**: 基礎 UI 元件 → 業務元件 → 頁面專用元件。
- **複刻原則**: 開發新功能時，優先複用或參考現有相似元件，以保持風格一致。
    - **範例**: `AIToolCard` 參考 `BusinessCard` 設計；`AIToolList` 參考 `BusinessList`。

---

## 6. 資料與狀態管理

### 6.1 資料層結構 (`src/lib/`)
資料庫連線、Mongoose 模型與核心業務邏輯存放於此。
```
lib/
├── db/
│   ├── connection.ts   # 資料庫連線管理
│   └── models/         # Mongoose 模型 (AITool, Company)
├── aitool/             # AI 工具相關業務邏輯
├── company/            # 企業相關業務邏輯
└── tender/             # 標案相關業務邏輯
```

### 6.2 狀態管理策略
- **本地狀態**: React Hooks (`useState`, `useReducer`) 用於元件內部狀態。
- **伺服器狀態**: SWR 或 React Query (推薦)，用於管理與快取 API 資料。
- **全域狀態**: Context API，用於使用者設定、主題等跨元件共享的狀態。

---

## 7. 開發環境與品質保證

### 7.1 Docker 開發流程
使用 `docker-compose.yml` 管理開發環境 (Next.js, MongoDB)。
- `npm run start:dev`: 一鍵啟動所有服務。
- `npm run db:backup`: 備份資料庫。
- `npm run stop`: 停止並清理環境。

### 7.2 程式碼品質
- **自動化**: 使用 Prettier 進行格式化，ESLint 進行程式碼風格與錯誤檢查。
- **TypeScript**: 所有程式碼需有嚴格的型別定義，特別是 API 回應與資料模型。
```typescript
// 範例: AI 工具資料模型型別
interface AITool {
  id: string;
  name: string;
  description: string;
  category: 'productivity' | 'creative' | 'analysis' | 'automation';
  tags: string[];
  url: string;
  isActive: boolean;
}
```

---

## 8. 核心開發原則：既有實現複刻

此為本專案最重要的原則，旨在確保架構一致性與開發效率。

- **開發檢查清單**:
    1.  **尋找參考**: 開發前，尋找並參考現有相似功能的實作。
    2.  **設計複用**: 複用現有元件、Hooks 與 API 設計模式。
    3.  **機制統一**: 遵循統一的錯誤處理與載入狀態機制。

- **實踐範例 (以 AI 工具模組為例)**:
    - **路由**: `aitool/search` 仿照 `company/search`。
    - **元件**: `AIToolCard` 仿照 `BusinessCard`。
    - **API**: `/api/aitool/search` 仿照 `/api/company/search` 的邏輯與結構。

---