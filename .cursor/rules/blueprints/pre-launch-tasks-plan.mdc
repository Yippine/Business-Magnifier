---
description: 上線前緊急任務 (Pre-Launch Task Plan)。當需要追蹤或執行專案正式上線前的必要開發任務時調用此規則。本規則涵蓋 AI 工具功能修復、標籤與 Prompt 驗證、以及標案系統頁面還原等關鍵任務，旨在確保核心功能於上線時穩定可靠。
globs: 
alwaysApply: false
---
# 🚀 上線前緊急任務追蹤清單 (Pre-Launch Task Plan)

## 🎯 總體目標
確保 Business Magnifier 專案在正式上線前，核心功能穩定、無重大錯誤，並提供可靠的使用者體驗。

---

## 📝 任務列表

### 1. 🚨【首要】修復 AI 工具詳細頁面 (AITool Detail Page)

- **目標**: 解決目前 95 個 AI 工具點擊後，詳細頁面 (`/aitool/detail/[toolId]`) 會報錯的問題，確保所有工具頁面皆能正常載入與運作。
- **狀態**: `未開始`
- **關鍵路由**: `/aitool/detail/[toolId]`
- **核心檔案**:
    - **頁面入口**: `next/src/app/aitool/detail/[toolId]/page.tsx`
    - **核心組件**: `next/src/components/aitool/AiToolDetail.tsx`
    - **通用模板**: `next/src/components/tools/common/PromptToolTemplate.tsx` (負責處理 Gemini API 互動)
    - **資料獲取**: `next/src/lib/aitool/apiHelpers.ts` (內的 `getToolById` 函式)
- **子任務**:
    1.  **[診斷]** 檢查 `getToolById` 函式，確認從 MongoDB 獲取資料的流程是否正確，特別是 ID 處理。
    2.  **[診斷]** 檢視 `AiToolDetail.tsx` 與 `PromptToolTemplate.tsx`，分析傳遞給組件的 `tool` 物件結構是否符合預期。
    3.  **[診斷]** 分析 `PromptToolTemplate.tsx` 中的 Gemini API 呼叫邏輯，檢查 `apiKey`、`prompt` 等參數是否正確傳遞。
    4.  **[修復]** 根據診斷結果，修復導致頁面崩潰的根本原因。
    5.  **[驗證]** 抽樣測試數個 AI 工具頁面，確保問題已解決。

---

### 2. 🧪 驗證與優化 AI 工具的 Prompt 與標籤

- **目標**: 確保所有 AI 工具的 Prompt 和標籤內容準確無誤，且生成效果令人滿意，避免出現不相關或品質低落的回答。同時，規劃自動化測試流程。
- **狀態**: `未開始`
- **核心檔案**:
    - **資料模型**: `next/src/lib/database/models/AITool.ts` (定義 AI 工具的 Schema)
    - **測試腳本 (需建立)**: `next/scripts/test-ai-tools.js`
    - **npm 腳本設定**: `next/package.json`
- **子任務**:
    1.  **[手動驗證]** 逐一審查資料庫中 95 個 AI 工具的 `prompt` 和 `tags` 欄位，修正不恰當或錯誤的內容。
    2.  **[手動測試]** 手動測試每個 AI 工具，評估生成結果的品質。
    3.  **[自動化規劃]** 建立 `next/scripts/test-ai-tools.js` 腳本，用於自動化測試：
        - 腳本需能連接資料庫，遍歷所有 AI 工具。
        - 為每個工具設計一個或多個標準的測試輸入 (Test Case)。
        - 呼叫 Gemini API 執行測試，並記錄結果。
        - (可選) 設計基本的結果驗證機制，例如檢查回應是否為空、是否包含錯誤訊息等。
    4.  **[整合]** 在 `next/package.json` 的 `scripts` 中新增指令 (如 `"test:aitools": "node scripts/test-ai-tools.js"`)，方便執行自動化測試。

---

### 3. 🏗️ 還原標案詳細頁面樣式與資料流

- **目標**: 確保新版 (`next`) 專案中的標案詳細頁面，其資料流處理、前端呈現及整體樣式，能最大程度地還原 `legacy` 專案的設計。
- **狀態**: `未開始`
- **關鍵路由**: `/tender/detail/[tenderId]`
- **核心檔案**:
    - **Next.js 版本**:
        - **頁面入口**: `next/src/app/tender/detail/[tenderId]/page.tsx`
        - **核心組件**: `next/src/components/tender/TenderDetail.tsx`
        - **子組件**: `next/src/components/tender/detail/*`
    - **Legacy 參考版本**:
        - **核心組件**: `legacy/src/components/tender/TenderDetail.tsx`
        - **子組件**: `legacy/src/components/tender/detail/*`
- **子任務**:
    1.  **[分析]** 詳細比對 `legacy` 與 `next` 專案中相關檔案的程式碼，梳理出資料結構、API 呼叫方式、及組件渲染邏輯的差異。
    2.  **[實作]** 調整 `next` 專案的 `TenderDetail.tsx` 及其子組件，使其在佈局、欄位顯示順序、資料格式化等方面與 `legacy` 版本對齊。
    3.  **[驗證]** 尋找數個具代表性的標案，同時在 `legacy` 和 `next` 環境中打開，進行像素級 (Pixel-by-pixel) 的比對，確保還原度。

---

## 4. 當前進度與後續步驟 (Current Status & Next Steps)

-   **當前狀態**: `規劃階段` - 已根據使用者需求，將上線前的緊急任務全數盤點並文件化。
-   **後續步驟**:
    1.  **任務啟動**: 從 **任務 1 (修復 AI 工具詳細頁面)** 開始，進行問題診斷與修復。
    2.  **定期同步**: 開發過程中，將在此文件的「開發進度追蹤」部分記錄關鍵決策與進度。
    3.  **逐項攻破**: 依序完成本計畫中定義的所有任務。

---

## 5. 開發進度追蹤 (Development Log)

-   **YYYY-MM-DD**:
    -   **行動**: 建立了 `pre-launch-tasks-plan.mdc` v1.0，將分散的需求整理成結構化的開發藍圖。
    -   **決策**: 確認了三大核心任務：AI 工具修復、Prompt/標籤驗證、標案頁面還原。


    -   **後續**: 準備開始執行任務 1。