---
description: Cursor Rule 建立與管理指南。當你需要建立新的 Agent Requested 類型 Cursor Rule、更新現有規則、或管理 rule 架構時調用此規則，用於確保 rule 品質和開發流程的一致性。專精於 rule 設計原則、內容架構、品質檢核。
globs: 
alwaysApply: false
---
# 專案文件與規則管理指南

## 🎯 文件管理理念
作為一位經營 IT 領域數十年的專家，在建立和管理專案文件時應該展現系統性思維、專業深度，並確保文件的可重複使用性與長期維護性。

## 核心管理原則

### 🔧 文件類型與職責劃分

#### 📋 Cursor Rules (.cursor/rules/*.mdc)
- **用途**: 可重複使用的技術指引和開發規範
- **適用情境**: 需要長期參考的技術知識、開發模式、最佳實踐
- **維護策略**: Agent Requested 類型，由 AI 直接建立和維護內容

#### 📖 專案 README 檔案
- **legacy/README.md**: Legacy 專案的說明和使用指南
- **next/README.md**: Next.js 重構專案的說明和使用指南
- **維護策略**: 由 AI 根據專案變更自動更新和維護

### 🎯 Rule 建立優先策略
1. **需求評估**: 確認是否真的需要建立新的 rule
2. **重複性檢查**: 避免與現有 rule 功能重複
3. **適用範圍**: 評估 rule 的適用情境和生命週期
4. **維護成本**: 考慮長期維護和更新的成本

### 📋 文件建立流程

#### Cursor Rule 建立流程
1. **分析需求**: 確認是否需要長期參考的技術指引
2. **規則設計**: 基於現有規則格式設計新規則
3. **描述撰寫**: 遵循現有規則的 description 格式
4. **內容架構**: 使用標準化的內容框架
5. **品質檢核**: 確保 rule 品質符合標準

#### README 維護流程
1. **內容分析**: 評估現有 README 內容的完整性
2. **結構優化**: 確保結構清晰、內容組織合理
3. **資訊更新**: 根據專案最新狀態更新資訊
4. **使用者導向**: 確保內容對使用者友善且實用

### 🔧 Rule Description 撰寫規範
參照現有規則格式，description 應包含：
- **功能說明**: 簡述規則的核心用途
- **觸發條件**: 明確何時調用此規則  
- **涵蓋範圍**: 列出規則處理的具體領域
- **專精領域**: 補充說明特殊情境或專業領域

**標準格式**:
```
[功能名稱] [用途說明]。當你需要 [具體觸發情境] 時調用此規則，用於 [涵蓋範圍和具體功能]。[特殊情境或補充說明]。
```

## Cursor Rule 內容架構框架

### 📚 技術指導類規則
```markdown
# [技術主題] 開發與實施指南

## 🎯 專家分析與背景
- 技術選擇的深層原因
- 業界最佳實踐標準
- 多年實戰經驗總結

## 🔍 核心實施策略
### 技術架構設計
- 系統性架構思路
- 關鍵技術要點
- 性能優化考量

### 開發實踐規範
- 程式碼組織原則
- 檔案命名規範
- 版本控制策略

## 💻 具體實現指引
### 環境配置
- 開發環境設置
- 必要依賴安裝
- 配置檔案範例

### 程式碼實現
- 核心功能實現
- 最佳實踐範例
- 常見陷阱避免

## 🚀 專家心路歷程
- 技術選擇的權衡考量
- 實戰中的經驗教訓
- 優化策略和建議

## 📋 品質檢核標準
- 功能完整性檢查
- 性能指標要求  
- 安全性考量
- 維護性評估
```

### 🛠️ 工具類規則
```markdown
# [工具名稱] 使用與優化指南

## 🎯 工具定位與價值
- 解決的核心問題
- 在開發流程中的位置
- 與其他工具的整合

## 📋 使用指南
### 基礎操作
- 安裝與配置
- 基本使用方法
- 常用指令清單

### 進階技巧
- 高級功能應用
- 自定義配置
- 性能優化設定

## 💡 專家實戰經驗
- 使用場景分析
- 最佳實踐建議
- 故障排除指引

## 🔧 整合策略
- 與專案的整合方式
- 工作流程優化
- 團隊協作考量
```

### 🏗️ 架構類規則
```markdown
# [架構主題] 設計與實施規範

## 🎯 架構理念與原則
- 設計哲學
- 核心原則
- 架構目標

## 📐 架構設計
### 系統結構
- 模組化設計
- 層次劃分
- 介面定義

### 技術選型
- 技術棧選擇依據
- 各組件職責分工
- 整合策略

## 🔄 實施流程
### 開發階段
- 開發環境準備
- 分階段實施計畫
- 里程碑檢查點

### 部署策略
- 部署環境配置
- 發布流程
- 監控機制

## 💡 專家架構經驗
- 架構演進思路
- 常見架構陷阱
- 擴展性考量

## 📊 評估標準
- 性能指標
- 可維護性指標
- 安全性標準
```

## README 檔案維護標準

### 📖 README.md 標準結構
```markdown
# 專案名稱

## 🎯 專案概述
- 專案目的與願景
- 核心功能特色
- 技術架構簡介

## 🚀 快速開始
### 環境需求
- Node.js 版本
- 資料庫要求
- 其他依賴

### 安裝步驟
```bash
# 克隆專案
git clone [repository-url]

# 安裝依賴
npm install

# 環境配置
cp .env.example .env

# 啟動開發環境
npm run dev
```

## 📁 專案結構
- 目錄組織說明
- 重要檔案說明
- 組件架構

## 🛠️ 開發指南
### 開發環境設置
- 開發工具建議
- IDE 配置
- 調試技巧

### 部署指引
- 建置流程
- 部署步驟
- 環境變數設定

## 🤝 貢獻指南
- 開發規範
- 提交規範
- 程式碼審查流程

## 📝 更新日誌
- 版本記錄
- 重要變更
- 已知問題
```

### 🔄 README 自動維護觸發條件
AI 將在以下情況自動更新 README.md：

1. **專案結構變更**: 新增/移除重要目錄或檔案
2. **技術棧變更**: 依賴套件重大更新或新增
3. **功能新增**: 新功能上線需要更新說明
4. **部署流程變更**: 部署步驟或環境配置調整
5. **使用者要求**: 明確要求更新 README 內容

## 使用者操作提醒格式

### 🔔 Rule 建立提醒範本
當建議建立新的 Cursor Rule 時，使用以下格式提醒使用者：

```markdown
## 🤖 Cursor Rule 建立建議

### 📋 建議建立的規則
**Rule Name**: `[建議的規則名稱]`  
**Type**: Agent Requested  
**Description**: 
```
[按照現有格式撰寫的 description]
```

### ⚙️ 設定步驟
由於 Cursor IDE 無法自動寫入 rule 的 type 和 description metadata，請按以下步驟手動設定：

1. 在 Cursor IDE 中開啟 Rules 設定
2. 點選「Add Rule」
3. 選擇「Agent Requested」類型
4. 填入上述 Rule Name 和 Description
5. 儲存設定

### 📝 Rule 內容
Rule 的具體內容將直接建立在 `.cursor/rules/` 目錄中，檔名為 `[rule-name].mdc`。
```

### 📖 README 更新提醒範本
當需要更新 README.md 時，使用以下格式：

```markdown
## 📝 README 更新建議

### 🎯 建議更新的檔案
- `legacy/README.md` - Legacy 專案說明文件
- `next/README.md` - Next.js 重構專案說明文件

### ✏️ 主要更新內容
- [更新項目 1]
- [更新項目 2]
- [更新項目 3]

### 📋 更新完成後請確認
- [ ] 安裝步驟是否正確
- [ ] 環境需求是否最新
- [ ] 專案結構說明是否完整
- [ ] 部署指引是否有效
```

## 文件品質檢核標準

### ✅ Rule 設計檢查
- [ ] Description 格式符合現有規則模式
- [ ] 觸發條件明確具體
- [ ] 涵蓋範圍完整清晰
- [ ] 與現有規則無重複衝突
- [ ] Rule Name 符合命名規範

### ✅ Rule 內容完整性檢查
- [ ] 包含專家經驗分享
- [ ] 提供具體實施步驟
- [ ] 涵蓋最佳實踐建議
- [ ] 包含故障排除指引
- [ ] 程式碼範例完整可執行

### ✅ README 品質檢查
- [ ] 結構清晰易讀
- [ ] 安裝步驟完整正確
- [ ] 使用說明詳細明確
- [ ] 專案資訊最新準確
- [ ] 對新手友善

### ✅ 實用性檢查
- [ ] 內容可直接應用
- [ ] 提供明確的操作指引
- [ ] 符合專案開發規範
- [ ] 易於維護和更新
- [ ] 與現有文件體系協調

## 文件管理最佳實踐

### 🎯 文件設計原則
1. **專一性**: 每個文件專注於特定領域
2. **可重用性**: 能夠在多種情境下應用
3. **更新性**: 易於維護和更新
4. **整合性**: 與現有文件體系協調
5. **可讀性**: 內容結構清晰，易於理解

### 💡 內容深度要求
1. **技術準確性**: 確保所有技術資訊正確
2. **實戰導向**: 基於真實專案經驗
3. **系統性**: 提供完整的解決方案
4. **前瞻性**: 考慮技術發展趨勢
5. **實用性**: 內容可直接應用於開發

### 🚀 專家價值體現
1. **經驗分享**: 融入多年實戰經驗
2. **深度洞察**: 提供技術背後的原理
3. **權衡分析**: 分析不同方案的優劣
4. **未來導向**: 考慮長期發展需求
5. **避坑指南**: 分享常見錯誤和解決方案

## 文件命名規範

### 📝 Cursor Rule 命名原則
- 使用 kebab-case 格式
- 名稱簡潔且具描述性
- 避免過長的名稱
- 體現 rule 的核心功能

### 🏷️ 命名範例
- `next-js-optimization-guide` - Next.js 優化指南
- `docker-deployment-strategy` - Docker 部署策略  
- `mongodb-schema-design` - MongoDB 架構設計
- `api-security-best-practices` - API 安全最佳實踐
- `react-component-architecture` - React 組件架構

## 文件維護策略

### 🔄 定期檢視
1. **內容更新**: 根據技術發展更新內容
2. **案例補充**: 加入新的實戰案例
3. **最佳實踐**: 更新業界最佳實踐
4. **錯誤修正**: 修正發現的技術錯誤

### 📊 使用統計
1. **調用頻率**: 分析 rule 的使用頻率
2. **效果評估**: 評估文件對開發效率的影響
3. **使用者回饋**: 收集開發團隊的使用回饋
4. **優化建議**: 基於統計數據優化文件內容