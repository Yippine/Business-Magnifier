---
description: Next.js 專案開發與 AI 協作指南。當需要開發新頁面、新功能或修改現有功能時，必須強制調用此規則。本指南用於確保所有開發工作（無論由人類或 AI 完成）均遵循統一的架構、設計模式與開發流程。其核心是新功能開發SOP，涵蓋從參考既有實現、設定SEO/GA、到複用通用組件的全過程，旨在確保專案程式碼的高度一致性。
globs: 
alwaysApply: false
---
# Next.js 專案開發與 AI 協作指南

## 🚨 最高指導原則：複刻既有實現 (Replicate Existing Implementations)

**此為本專案不可動搖的核心原則。** 所有新功能、新頁面、新組件的開發，無論由人類或 AI 執行，都**必須**以複製和調整現有相似功能的實現為基礎。此舉旨在確保專案在視覺風格、程式碼架構、使用者體驗和開發效率上的絕對一致性。

**禁止重造輪子 (Do Not Reinvent the Wheel)。** 在撰寫任何新程式碼之前，首要任務是理解並複用已有的設計模式與通用組件。整體架構請參考 `project-architecture.mdc`。


---

## ⚙️ 新功能/頁面開發標準作業程序 (SOP)

當接到一個新的開發需求時，**必須**嚴格遵循以下檢查清單 (Checklist)：

### 1. 需求分析與參考定位 (Analyze & Locate)
- **[ ] 尋找相似功能**：在 `src/app` 和 `src/components` 目錄下，尋找一個功能或頁面結構最相似的現有範例。
    - *範例：要開發「產品查詢」頁面，應優先參考 `app/company/search/` 的結構。*
- **[ ] 確認渲染策略**：根據需求與 `project-architecture.mdc` 中定義的渲染模型，參考現有範例決定頁面的渲染策略 (SSR, SSG, ISR, CSR)，並在 `page.tsx` 中正確設定。

### 2. 結構與頁面設定 (Structure & Metadata)
- **[ ] 複製與修改結構**：複製參考範例的目錄結構與檔案 (`page.tsx`, `layout.tsx` 等)。
- **[ ] 設定頁面元數據 (SEO)**：**必須**遵循 `seo-optimization-guide.mdc` 中的規範來設定。
    - **必須**從 `src/config/pageTitles.ts` 導入 `staticTitles` 或 `dynamicTitles` 來設定頁面 `title`。
    - **必須**為頁面提供精準的 `description` 和 `keywords`。
    - **禁止**在 `metadata` 中硬編碼任何標題字串。
    - *範例：*
      ```typescript
      import { staticTitles } from '@/config/pageTitles';
      import type { Metadata } from 'next';

      export const metadata: Metadata = {
        title: staticTitles.faq,
        description: '關於 Business Magnifier 的常見問題解答...',
        keywords: ['常見問題', 'FAQ', '企業搜尋'],
      };
      ```

### 3. 組件與樣式 (Component & Style)
- **[ ] 複用通用組件**：
    - **優先**使用 `src/components/ui/` 中的基礎 UI 組件 (如 `Button`, `Input`, `Card`)。
    - **優先**使用 `src/components/common/` 中的通用功能組件 (如 `Loading`, `ErrorMessage`)。
- **[ ] 遵循設計風格**：新組件的視覺設計和 Tailwind CSS 用法，**必須**符合 `ui-ux-aesthetic-guide.mdc` 的美學標準，並與參考範例保持視覺上的一致性。

### 4. 業務邏輯與資料處理 (Business Logic & Data)
- **[ ] 複用業務邏輯**：如果新功能需要類似的後端資料處理，**應**優先使用或擴充 `src/lib/` 中對應模組的函式。資料庫操作需遵循 `mongodb-architecture-guide.mdc`。
- **[ ] 遵循 API 規範**：若需新增 API 端點，其請求/回應格式**必須**符合 `src/app/api/` 下的現有規範。

### 5. 分析與追蹤 (Analytics & Tracking)
- **[ ] 整合 Google Analytics**：
    - 確保 `RootLayout` 中的 `GoogleAnalytics` 組件存在。
    - 對於關鍵使用者互動（如表單提交、重要按鈕點擊），**必須**調用 `trackBusinessEvents` 或其他 GA 事件追蹤函式。詳細策略請參閱 `google-analytics-strategy.mdc`。

### 6. 版本控制 (Version Control)
- **[ ] 遵循 Git 工作流**: 所有開發過程中的暫存與最終提交，都**必須**嚴格遵循 `git-workflow-guide.mdc` 中定義的 `WIP` 和 `Release` 流程。


---

## 專案概覽

- **定位**: 採用 Next.js 14 App Router 的 SEO 優化企業資料查詢平台。
- **核心原則**:
    - **架構一致性**: 維護統一的專案結構與設計模式。參考 `project-architecture.mdc`。
    - **既有實現複刻**: 新功能開發需參照現有相似功能的實現，確保風格一致。
- **技術棧與現況**:
    - **主分支**: `main`
    - **資料庫**: MongoDB (見 `mongodb-architecture-guide.mdc`)
    - **開發環境**: Docker
    - **程式碼品質**: ESLint + Prettier


---

## 目錄結構

### 根目錄結構
`next/` 為主要開發目錄，代表採用 Next.js 14 App Router 的新一代應用。`legacy/` 為舊版 Vite 應用，作為功能遷移與樣式參考的依據。
```
Business-Magnifier/
├── next/      # 主要 Next.js 應用 (開發重心)
├── legacy/    # 舊版 Vite 應用 (參考用)
└── .cursor/   # AI 助手配置 (規則管理見 documentation-management.mdc)
```

### `src` 目錄結構
採功能職責分層設計，確保程式碼職責清晰。
```
src/
├── app/         # App Router 頁面與 API 路由
├── components/  # React 元件 (UI, 業務邏輯)
├── lib/         # 核心函式庫 (資料庫, API 封裝, 業務邏輯)
├── hooks/       # 自定義 React Hooks
├── types/       # TypeScript 型別定義
├── utils/       # 通用工具函式
├── data/        # 靜態資料與配置
└── config/      # 應用程式配置
```

### `app` 目錄與路由結構
採功能模組化組織，各功能 (如 `company`, `tender`, `aitool`) 自成模組。
```
app/
├── company/          # 企業查詢模組
│   ├── search/       #   - 搜尋頁 (SSR)
│   └── [id]/         #   - 詳情頁 (ISR)
├── tender/           # 標案查詢模組
├── aitool/           # AI 工具模組
├── api/              # API 路由
├── faq/              # 常見問題頁面 (SSG)
└── feedback/         # 使用者回饋頁面 (CSR)
```


---

## 路由與渲染策略

### 3.1 頁面檔案慣例
- **頁面**: `page.tsx`
- **版面**: `layout.tsx`
- **載入**: `loading.tsx`
- **錯誤**: `error.tsx`
- **404**: `not-found.tsx`

### 3.2 路由結構
- **靜態路由**: `/company/search`, `/aitool/search`, `/faq`
- **動態路由**: `/company/[id]`, `/tender/[id]`, `/aitool/detail/[id]`

### 3.3 渲染策略
- **SSG (靜態生成)**: 內容不常變動的頁面 (FAQ, 隱私政策, AI 工具詳情頁)。
- **ISR (增量靜態再生)**: 熱門但需定期更新的頁面 (企業/標案詳情頁)。
- **SSR (伺服器端渲染)**: 需要即時資料的頁面 (搜尋結果頁)。
- **CSR (客戶端渲染)**: 高度互動的元件 (回饋表單, 複雜圖表)。


---

## API 設計規範

### 4.1 API 路由結構 (`src/app/api/`)
API 路由依功能模組劃分，保持結構清晰。
```
api/
├── company/
│   ├── route.ts           # GET /api/company
│   └── [id]/route.ts      # GET /api/company/[id]
├── aitool/
│   ├── route.ts           # GET /api/aitool
│   ├── search/route.ts    # POST /api/aitool/search
│   └── [id]/route.ts      # GET /api/aitool/[id]
├── feedback/route.ts      # POST /api/feedback
└── health/route.ts        # GET /api/health
```

### 4.2 API 設計原則
- **RESTful**: 使用標準 HTTP 方法 (GET, POST, PUT/PATCH, DELETE)。
- **統一回應格式**: API 回應需遵循標準的成功與失敗結構，便於前端處理。
```typescript
// 成功回應
interface APIResponse<T> {
  success: true;
  data: T;
  message?: string;
  pagination?: object;
}

// 錯誤回應
interface APIError {
  success: false;
  error: string;
  code?: string;
}
```


---

## 元件架構

### 5.1 元件目錄結構 (`src/components/`)
```
components/
├── ui/         # 基礎 UI 元件 (Button, Input)，無業務邏輯
├── layout/     # 版面配置元件 (Header, Footer)
├── business/   # 企業業務相關元件
├── aitool/     # AI 工具業務相關元件 (AIToolCard)
├── common/     # 通用功能元件 (Loading, ErrorBoundary)
└── seo/        # SEO 專用元件 (MetaTags, StructuredData)
```

### 5.2 元件設計與複用
- **分層**: 基礎 UI 元件 → 業務元件 → 頁面專用元件。
- **複刻原則**: 開發新功能時，優先複用或參考現有相似元件，以保持風格一致。
    - **範例**: `AIToolCard` 參考 `BusinessCard` 設計；`AIToolList` 參考 `BusinessList`。


---

## 資料與狀態管理

### 6.1 資料層結構 (`src/lib/`)
資料庫連線、Mongoose 模型與核心業務邏輯存放於此。
```
lib/
├── db/
│   ├── connection.ts   # 資料庫連線管理
│   └── models/         # Mongoose 模型 (AITool, Company)
├── aitool/             # AI 工具相關業務邏輯
├── company/            # 企業相關業務邏輯
└── tender/             # 標案相關業務邏輯
```

### 6.2 狀態管理策略
- **本地狀態**: React Hooks (`useState`, `useReducer`) 用於元件內部狀態。
- **伺服器狀態**: SWR 或 React Query (推薦)，用於管理與快取 API 資料。
- **全域狀態**: Context API，用於使用者設定、主題等跨元件共享的狀態。


---

## 開發環境與品質保證

> **⚠️ 重要：環境變數管理 (`.env.local`)**
> 由於安全限制，AI 無法直接讀取 `.env.local` 檔案的內容。若 AI 判斷需要新增環境變數，它會暫停操作，並明確告知需要新增的「鍵」與「值」。
>
> **開發者職責**: 請手動將 AI 提供的鍵值對加入到 `next/.env.local` 檔案。
> **AI 職責**: **嚴禁**使用 `echo` 或其他指令直接建立或覆蓋 `.env.local` 檔案。

### 7.1 Docker 開發流程
使用 `docker-compose.yml` 管理開發環境 (Next.js, MongoDB)。
- `npm run start:dev`: 一鍵啟動所有服務。
- `npm run db:backup`: 備份資料庫。
- `npm run stop`: 停止並清理環境。

### 7.2 程式碼品質
- **自動化**: 使用 Prettier 進行格式化，ESLint 進行程式碼風格與錯誤檢查。
- **TypeScript**: 所有程式碼需有嚴格的型別定義，特別是 API 回應與資料模型。
```typescript
// 範例: AI 工具資料模型型別
interface AITool {
  id: string;
  name: string;
  description: string;
  category: 'productivity' | 'creative' | 'analysis' | 'automation';
  tags: string[];
  url: string;
  isActive: boolean;
}
```


---

## 開發人員維運控制台 (`/admin`) 開發規範

專案包含一個位於 `/admin/*` 路徑下的內部維運控制台，開發此區域時必須遵循以下原則：

### 8.1. 零 SEO 與追蹤
- 所有 `/admin` 下的頁面 **禁止** 包含任何 `Google Analytics` 追蹤碼。
- **禁止** 為 `/admin` 頁面產生 `Metadata` 物件。
- 為此，`/admin` 路由群組應使用其專屬的 `layout.tsx`，該佈局不應繼承根佈局中的任何全域元件。

### 8.2. 功能導向 UI
- UI 設計應以功能性為最高優先，避免使用面向終端使用者的行銷元件 (如 `HeroSection`)。

### 8.3. 安全性優先
- 嚴禁將高風險 (`docker:*`, `deploy:*` 等) 的 `npm scripts` 介面化。
- 所有後端 API 必須通過 Secret Token 進行權限驗證。

---

## Admin Console 黃金開發準則 (Golden Standard)

此為針對 `/admin/*` 下所有頁面開發的**強制性**指導方針，旨在將 `/admin/sitemap` 和 `/admin/database` 頁面在多次迭代後所結晶出的最佳實踐，固化為開發標準。

### 9.1. 唯一參考範本 (Single Source of Truth)
- **黃金標準**: `/admin/sitemap` 頁面及其核心元件 `SitemapConsole.tsx` 是所有新 Admin Console 頁面開發的**唯一且必須**遵循的「黃金標準範本」。
- **複刻原則**: 開發新頁面（如 `/admin/system`）時，**必須**從完整複製 `/admin/sitemap` 或 `/admin/database` 的頁面結構、元件組合與互動邏輯開始。

### 9.2. 非同步載入與視覺回饋 (Async Loading & Feedback)
- **強制骨架屏 (Skeleton)**:
    - 任何需要透過 API 請求或資料庫查詢的非同步數據，其對應的 UI 區域在等待數據回傳期間，**必須**顯示為「骨架屏」或「脈衝式」的載入效果 (`animate-pulse`)。
    - **嚴禁**使用簡單的「載入中...」文字或單一旋轉圖示作為主要回饋。
    - 應優先使用 `src/components/skeletons` 或參考 `CollectionStatusCard` 中針對數據欄位的載入效果。
- **即時渲染優先**:
    - 頁面級元件 (如 `DatabaseConsole.tsx`) 的外層佈局、標題、說明文字等靜態內容，**必須**立即渲染，**不得**因等待內部數據而延遲。確保使用者能立刻看到頁面框架。

### 9.3. 標準化互動與動畫 (Standardized Interaction & Animation)
- **卡片互動 (`hover-lift`)**:
    - 所有可點擊的、以卡片形式呈現的元件（如 `CollectionStatusCard`），**必須**實作 `hover-lift` 懸停效果。
    - **標準實現**: `transition-all duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1`。
- **按鈕回饋**:
    - 按鈕在懸停 (`hover`) 和點擊 (`active`) 時**必須**有明確的視覺變化（如背景色、邊框色、陰影或輕微位移），以提供清晰的操作回饋。
    - 帶有外部連結的按鈕，建議加入 `ExternalLink` 圖示。
- **優雅過渡**:
    - 元件的狀態轉換（如顯現、消失、尺寸變化）**必須**使用平滑過渡效果。
    - **標準實現**: `transition-all duration-300 ease-in-out`。

### 9.4. 元件設計語言 (Component Design Language)
- **圖示系統**: 優先使用 `lucide-react` 圖示庫，並保持風格一致性（如 `Cylinder` 代表資料集）。
- **字體層次**: 遵循已建立的字體大小與粗細層級，例如卡片標題為 `text-xl font-bold`，統計數值為 `text-lg font-semibold`。
- **視覺一致性**: 新的管理控制台頁面在佈局、顏色、間距、圓角和陰影等方面，**必須**與 `SitemapConsole` 和 `DatabaseConsole` 保持視覺上的高度一致。