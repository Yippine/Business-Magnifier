---
description: 導入「Git + Cloud9 + Q Developer + Cursor」黃金開發流程的實施指南與任務追蹤。當你需要規劃、執行或回顧雲端原生開發環境的遷移進度時應調用此規則。本規則為此遷移任務的唯一真實來源 (Single Source of Truth)，旨在解決多設備同步的痛點，實現真正的「Vibe Coding」體驗。
alwaysApply: false
---
# 🚀 Vibe Coding 開發環境遷移計畫

## 🎯 1. 專案目標 (Project Goal)

本計畫旨在徹底革新「Business Magnifier」專案的開發工作流程，從傳統的本地環境開發模式，遷移至以雲端為核心、AI 為輔助的現代化開發模式。透過整合 **Git + AWS Cloud9 + AWS Q Developer + Cursor IDE**，我們將達成以下核心目標：

*   **消除多設備同步問題**：建立單一、一致、隨時可用的雲端開發環境 (CDE)。
*   **提升開發與部署效率**：將繁瑣的雲端資源管理與部署工作交由 AI (AWS Q) 處理。
*   **實現「Vibe Coding」體驗**：讓開發者能專注於創造性工作，而非環境配置與維運。

本文件為此遷移任務的唯一真實來源 (Single Source of Truth)，將用於追蹤所有相關任務的規劃與進度。

---

## 🛠️ 2. 核心組件 (Core Components)

| 組件 | 角色 | 在本專案中的應用 |
| :--- | :--- | :--- |
| **Git (GitHub)** | **單一事實來源** | 所有程式碼的變更與版本控制中心。 |
| **AWS Cloud9** | **雲端開發大本營** | 提供一個基於 EC2 的、完全配置好的開發環境，包含 Docker、Node.js 等所有依賴。 |
| **Cursor IDE** | **程式碼神經機械鎧** | 作為本地的主力開發介面，透過 `Remote-SSH` 功能無縫連接至 Cloud9，提供極致的程式碼生成與重構體驗。 |
| **AWS Q Developer** | **雲端專屬副官** | 在 Cloud9 終端機和 Cursor 擴充功能中使用，以自然語言指令處理所有 AWS 相關的開發、分析、測試與部署任務。 |

---

## 🗺️ 3. 實施路徑與任務清單 (Implementation Roadmap & Tasks)

### Phase 1: 建立雲端大本營 (CDE Foundation)

**目標：** 建立一個穩定、可靠、包含所有專案依賴的雲端開發環境。

- [ ] **Task 1.1: 創建 Cloud9 環境**
    - [ ] 登入 AWS Console 並前往 Cloud9。
    - [ ] 建立一個新的 EC2 環境。
    - [ ] **[關鍵]** Instance Type 選擇 `t3.medium` 或更高規格以確保效能。
    - [ ] 驗證環境成功啟動。

- [ ] **Task 1.2: 配置 Cloud9 環境**
    - [ ] 在 Cloud9 終端機中安裝 Docker 與 Docker Compose。
    - [ ] Clone 本專案的 Git Repository。
    - [ ] 進入 `next/` 目錄，安裝 `npm` 依賴。

- [ ] **Task 1.3: 啟動並驗證專案**
    - [ ] 使用 `docker-compose up -d` 啟動 MongoDB 服務。
    - [ ] 使用 `npm run dev` 啟動 Next.js 開發伺服器。
    - [ ] 使用 Cloud9 內建的 "Preview" 功能，確認可以成功訪問 `localhost:3000` 上的應用。

### Phase 2: 無縫連接本地主力 IDE (IDE Integration)

**目標：** 實現本地 Cursor IDE 與雲端 Cloud9 環境的無縫連接，兼顧最佳介面體驗與雲端環境的一致性。

- [ ] **Task 2.1: 安裝並設定 VS Code Remote-SSH**
    - [ ] 在本地 Cursor IDE 中，從 Marketplace 安裝 `Remote - SSH` 擴充功能。
    - [ ] 根據 Cloud9 的指引，設定 SSH Config 檔案，以便連接到 Cloud9 的 EC2 實例。

- [ ] **Task 2.2: 連接並測試**
    - [ ] 透過 Cursor 左下角的遠端選單，選擇連接到新設定的 Cloud9 Host。
    - [ ] 連接成功後，在 Cursor 中打開雲端的專案資料夾。
    - [ ] 測試在 Cursor 中修改檔案，並在 Cloud9 終端機中確認變更，反之亦然。

### Phase 3: 喚醒你的 AI 副官 (AI Co-pilot Activation)

**目標：** 將 AWS Q Developer 整合至工作流，開始將雲端操作任務委派給 AI。

- [ ] **Task 3.1: 安裝 AWS Q Developer 工具鏈**
    - [ ] 在已連接遠端的 Cursor IDE 中，安裝 `AWS Toolkit` 擴充功能並登入 Q Developer。
    - [ ] 在 Cloud9 的終端機中，透過 `npm` 全域安裝 `@aws/q-cli`。

- [ ] **Task 3.2: 開始指揮 AI 進行輔助任務**
    - [ ] **[練習]** 嘗試用 Q CLI 分析專案，例如：`q scan-project` 或 `q what are the unused dependencies in my package.json?`
    - [ ] **[練習]** 嘗試在 Cursor IDE 的 Q 聊天視窗中，詢問關於 AWS SDK 的使用方法。

- [ ] **Task 3.3: 挑戰進階部署任務**
    - [ ] **[目標]** 研究並使用 Q CLI 來生成部署計畫，例如：`q create a deployment plan for my Next.js app to AWS ECS.`
    - [ ] **[目標]** 逐步用 Q CLI 的能力取代現有的手動部署腳本 (`scripts/connect-ec2.sh` 等)。

---

## ✅ 4. 成功指標 (Definition of Done)

*   開發者可以從任何一台電腦，透過瀏覽器或本地 Cursor 在 5 分鐘內進入完全一致且已啟動的開發環境。
*   日常開發工作 (程式碼編寫、重構、偵錯) 在本地 Cursor 中流暢進行，感受不到遠端延遲的明顯影響。
*   新的 AWS 資源需求 (如 S3 Bucket, IAM Role) 和應用程式的部署，主要透過 AWS Q CLI 指令完成。
*   因本地環境不一致或同步問題導致的開發中斷完全消除。

---

## ⚠️ 5. 風險與緩解措施 (Risks & Mitigations)

| 風險 | 緩解措施 |
| :--- | :--- |
| **雲端資源成本** | 選擇符合需求的最小 EC2 實例；設定 Cloud9 環境在閒置 30 分鐘後自動休眠；在工作日結束後手動停止 EC2 實例。 |
| **網路延遲影響** | 在 Phase 2 進行充分測試，確認延遲在可接受範圍內。對於網路環境較差的場景，可保留本地開發作為備案。 |
| **學習曲線** | 從小任務開始，逐步增加 Q Developer 的使用深度。優先將文件清晰、重複性高的手動流程（如部署）交給 Q。 |