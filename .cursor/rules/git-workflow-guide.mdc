---
description: Git 工作流程與版本控制指南。定義了標準 Commit 格式、AI 自動化上版流程，以及包含「WIP 測試提交」與「自動化 Squash 合併」的進階工作流程。是 AI 執行版本控制時的最高行為準則。
globs: 
alwaysApply: false
---
# Git 工作流程與 AI 指導原則

## 1. AI 指導原則與核心摘要
- **流程優先**: 當接收到 "上版", "提交" 等指令時，**必須 (MUST)** 遵循本文件定義的「AI 自動化工作流程」。
- **`integration` 定義**: 專指**同時涉及前後端程式碼**的變更。
- **配置優先**: 根目錄的設定檔 (`.js`, `.json`, `.toml`) 變更，優先使用 `[chore]`。
- **文件優先**: `.cursor/rules/*.mdc` 的變更，優先使用 `[docs]`。
- **歷史參考**: AI 生成 Commit 標題時，應參考 `git lg` 的風格。

## 2. 標準化提交格式與驗證
### 格式
- **單一範疇**: `[範疇] 描述內容`
- **多重範疇**: `[範疇1, 範疇2] 描述內容`

### 範疇 (Type) 定義
| 範疇 | 英文 | 核心職責 |
| :--- | :--- | :--- |
| 前端 | `[front-end]` | UI/UX 設計、頁面元件、前端互動邏輯 |
| 後端 | `[back-end]` | 核心業務 API、後端服務 |
| 整合 | `[integration]` | 同時涉及前後端 |
| 資料庫 | `[database]` | Schema 設計、資料遷移、索引優化 |
| 部署 | `[deploy]` | 雲端部署、容器化 (Docker)、CI/CD |
| 事務 | `[chore]` | 套件管理、框架與IDE設定、環境變數 |
| 文件 | `[docs]` | `.cursor/rules/*.mdc` 或 `README.md` 更新 |
| 格式 | `[style]` | 程式碼排版 |

### 標題 (Subject) 撰寫規則
- **語言**: 必須使用**英文**。
- **格式**: Title Case 或 Sentence case。
- **分隔符**: 使用 `|` 分隔多個獨立功能。

### AI 驗證流程
- **範疇檢查**: 驗證 `[範疇]` 是否為上方定義的 8 種之一。若無效，必須停止操作並提供修正建議。
- **自動生成 Commit**: AI 應根據異動檔案路徑 (`/next/components/` -> `[front-end]`) 自動判斷範疇並生成標題。

## 3. AI 自動化工作流程
### 流程一：正式上版 (Standard Publish)
- **觸發條件**: 使用者說「上版」、「正式提交」。
- **執行步驟**:
  1.  **智慧暫存**: 執行 `git status`。若暫存區為空但有變更，則 `git add .`；若暫存區已有內容，則跳過。
  2.  **生成 Commit**: 根據規範生成 Commit Message 並執行 `git commit`。
  3.  **推送與驗證 (Push & Verify)**:
      - **執行推送**: `git push origin <當前分支>`。
      - **循環驗證**: 執行 `git lg -1`，檢查最新 commit 是否已包含 `origin/<分支名>`。
      - **重試機制**: 如果驗證失敗，最多重試推送 2 次。若持續失敗，則停止並向使用者報告錯誤。
  4.  **最終報告**: 確認成功後，執行 `git status` 和 `git lg -3` 展示最終狀態。

### 流程二：WIP 測試提交 (WIP Commit)
- **觸發條件**: 使用者說「暫存進度」、「設定存檔點」或類似的非正式提交請求。
- **執行步驟**:
  1.  **識別主題**: 從近期 commit 或對話中識別工作主題。
  2.  **自動編號**: 查找最新版本號並遞增 (如 `v2` -> `v3`)。
  3.  **執行提交**: `git commit -m "主題 v版本號 [可選說明]"` (不使用範疇，不限語言)。

### 流程三：WIP 合併上版 (Squash & Publish)
- **觸發條件**: 當存在 WIP 提交時，使用者說「上版」、「正式提交」。
- **執行步驟**:
  1.  **識別 WIP 鏈**: 掃描並計算從 `origin/next` 以來的 WIP commit 數量 `N`。
  2.  **執行 Squash**: `git reset --soft HEAD~N`。
  3.  **接續流程一**: 自動銜接並執行「正式上版」流程，從第 2 步 (`生成 Commit`) 開始。

## 4. 指令與別名參考
- **日誌檢查**: 本專案統一使用 `git lg`。
  ```bash
  # 顯示最近 3 筆美化日誌
  git lg -3
  ```
- **`git lg` 定義**:
  ```bash
  git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ```
- **常用指令**: `git status`, `git branch --show-current`