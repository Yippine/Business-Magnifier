---
description: **描述**: 簡化實用的 Git 工作流程規範，專注於 Yippine 專案的 commit message 格式、智能分支判斷和自動化上版流程。提供 AI 輔助上版功能，根據當前分支和異動檔案內容智能決定推送目標。  **觸發條件**:  - 需要執行 Git 上版流程 - Commit message 格式規範問題   - 智能分支推送判斷 - AI 輔助自動化上版 - 異動檔案分析和範疇判斷 - 當前分支狀態檢查  **關鍵詞**: `Git上版`, `commit message`, `智能推送`, `分支判斷`, `自動化流程`, `範疇標籤`, `AI輔助上版`, `next分支`, `main分支`
globs: 
alwaysApply: false
---
# Git 工作流程與提交規範

## Commit Message 格式

### 📝 基本格式
```
[範疇] 描述內容
```

### 🏷️ 功能範疇分類

#### 基礎範疇
- `[front-end]` - 前端開發功能，負責前端 UI 設計、HTML/CSS/JS 實現、動態效果
- `[back-end]` - 後端核心業務邏輯開發
- `[integration]` - 全端整合功能，前後端都有異動時使用
- `[database]` - 資料庫相關：資料蒐集、整理、資料庫建置和維護
- `[deploy]` - 雲端部署：主機設置、部署配置和測試
- `[chore]` - 設定檔案、構建工具、輔助工具相關變更
- `[style]` - 程式碼排版標準化，不影響功能的格式調整
- `[docs]` - 純文件撰寫或更新

#### 判斷原則
- **前端為主** → `[front-end]`
- **後端為主** → `[back-end]`  
- **前後端都有** → `[integration]`
- **雲端/部署相關** → `[deploy]`
- **設定檔案** → `[chore]`
- **排版整理** → `[style]`
- **資料庫操作** → `[database]`
- **文件撰寫** → `[docs]`

### ✅ Commit Message 範例
```bash
# 前端功能
[front-end] Added top loading indicator to the tool usage page and configured the triggers for loading and stopping loading.

# 後端功能  
[back-end] Implement user authentication API with JWT token validation.

# 全端整合
[integration] Create webpage title definition files. Create Metadata for FAQs, Feedback, and Privacy Policy.

# 部署相關
[deploy] Configure the ecosystem.prod.config.cjs for the next branch.

# 設定檔案
[chore] Create Cursor Ignore Files

# 排版整理
[style] Standardize code formatting and fix indentation issues.

# 資料庫相關
[database] Update business data schema and add new indexes for performance.

# 文件更新
[docs] Update API documentation and add usage examples.
```

## 上版流程

### 🚀 標準上版步驟
```bash
# 1. 檢查異動檔案
git status

# 2. 確認異動內容 (使用 SourceTree 排查)
# 檢查所有變更是否正確

# 3. 加入所有變更
git add .

# 4. 提交變更
git commit -m "[範疇] 描述內容"

# 5. 智能推送到對應分支
# AI 會自動判斷當前分支和異動內容來決定推送目標
git push origin <當前分支>

# 6. 最終檢查
git status
git log --oneline -5
```

### 🤖 智能分支判斷邏輯
AI 將根據以下邏輯自動決定推送目標：

1. **檢查當前分支**
   ```bash
   git branch --show-current
   ```

2. **分析異動檔案內容**
   - 如果異動檔案主要位於 `next/` 目錄 → 推送到 `next` 分支
   - 如果異動檔案主要位於專案根目錄 → 推送到當前分支

3. **推送決策流程**
   ```
   當前分支是 next？
   ├─ 是 → 檢查異動檔案
   │   ├─ 主要在 next/ 目錄 → git push origin next
   │   └─ 主要在根目錄 → git push origin next (重構相關)
   └─ 否 (main 分支) → 檢查異動檔案
       ├─ 主要在 next/ 目錄 → 警告並建議切換到 next 分支
       └─ 主要在根目錄 → git push origin main
   ```

### ⚠️ 重要注意事項
- **智能判斷**：AI 會根據當前分支和異動檔案內容自動決定推送目標
- **彈性處理**：支援在 main 分支進行必要的推送
- **安全提醒**：如果在 main 分支異動 next/ 目錄檔案，會提醒切換分支
- **強制推送**：需要特別通知時才使用 `git push -f origin <分支>`

### 🔍 檢查指令
```bash
# 查看當前分支
git branch --show-current

# 查看最近提交記錄
git log --oneline -10
git lg -10

# 查看當前狀態
git status

# 查看遠端分支狀態
git remote -v
git branch -r
```

## AI 輔助上版

### 🤖 觸發指令
當用戶說：**"請幫我上版"** 時，AI 將自動執行以下流程：

1. **檢查當前狀態**
   ```bash
   git status
   git branch --show-current
   ```

2. **分析變更內容**
   - 根據異動檔案判斷適合的範疇標籤
   - 分析異動檔案路徑決定推送目標分支
   - 生成合適的 commit message

3. **智能推送邏輯**
   ```javascript
   // 偽代碼邏輯
   const currentBranch = getCurrentBranch()
   const changedFiles = getChangedFiles()
   const isNextRelated = changedFiles.some(file => file.startsWith('next/'))
   const isRootRelated = changedFiles.some(file => !file.startsWith('next/'))
   
   if (currentBranch === 'next') {
     // 在 next 分支，直接推送到 next
     targetBranch = 'next'
   } else if (currentBranch === 'main') {
     if (isNextRelated && !isRootRelated) {
       // 在 main 分支但只異動 next/ 目錄，建議切換分支
       showWarning('建議切換到 next 分支進行此變更')
       targetBranch = 'next' // 或詢問用戶意見
     } else {
       // 在 main 分支且異動根目錄，推送到 main
       targetBranch = 'main'
     }
   }
   ```

4. **執行上版流程**
   ```bash
   git add .
   git commit -m "[判斷的範疇] 生成的描述"
   git push origin <智能判斷的目標分支>
   ```

5. **最終驗證**
   ```bash
   git status
   git log --oneline -3
   ```

### 📋 範疇判斷邏輯
AI 將根據以下檔案路徑模式自動判斷範疇：

```javascript
// 前端相關
/components/, /pages/, /styles/, /public/, .css, .scss, .tsx, .jsx
→ [front-end]

// 後端相關  
/api/, /server/, /controllers/, /models/, /middleware/
→ [back-end]

// 整合相關
前端 + 後端檔案同時異動
→ [integration]

// 設定相關
package.json, .env, config/, .cursor/, ecosystem.config.js
→ [chore]

// 部署相關
Dockerfile, .github/, netlify.toml, vercel.json
→ [deploy]

// 資料庫相關
/database/, /migrations/, /seeds/, .sql
→ [database]

// 文件相關
README.md, /docs/, .md 檔案
→ [docs]
```

### 🎯 分支推送決策表
| 當前分支 | 異動檔案位置 | 推送目標 | 說明 |
|---------|-------------|---------|------|
| next | next/ 目錄 | next | 重構相關變更 |
| next | 根目錄 | next | 在重構分支的根目錄變更 |
| main | next/ 目錄 | 警告 + next | 建議切換到 next 分支 |
| main | 根目錄 | main | 生產環境相關變更 |
| main | 混合 | 詢問用戶 | 需要用戶確認推送目標 |

## 分支管理

### 🌳 當前分支策略
```
main (生產環境) - 支援必要時推送
└── next (重構開發分支) - 主要重構工作分支
```

### 📋 分支操作
```bash
# 切換到 next 分支
git checkout next

# 切換到 main 分支
git checkout main

# 確認當前分支
git branch --show-current

# 同步遠端分支
git pull origin <當前分支>

# 查看分支差異
git diff main..next
```

## 常用指令速查

### 📚 Git 指令集
```bash
# 狀態檢查
git status                    # 查看工作區狀態
git branch --show-current     # 查看當前分支
git branch -r                 # 查看遠端分支

# 提交相關
git add .                     # 加入所有變更
git commit -m "message"       # 提交變更
git push origin <分支>        # 推送到指定分支

# 歷史記錄
git log --oneline -10         # 查看最近 10 筆提交
git lg -10                    # 使用別名查看記錄

# 強制操作 (謹慎使用)
git push -f origin <分支>     # 強制推送到指定分支

# 回復操作
git reset --soft HEAD~1       # 回復最後一次提交 (保留變更)
git reset --hard HEAD~1       # 回復最後一次提交 (丟棄變更)
```

### 🎯 智能上版模板
```bash
# AI 輔助智能上版 (推薦)
# 當用戶說「請幫我上版」時自動執行

# 手動上版模板 (需要自行判斷分支)
git status && git add . && git commit -m "[範疇] 描述" && git push origin $(git branch --show-current) && git status
```