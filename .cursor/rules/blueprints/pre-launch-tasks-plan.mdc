---
description: 上線前緊急任務 (Pre-Launch Task Plan)。當需要追蹤或執行專案正式上線前的必要開發任務時調用此規則。本規則涵蓋 AI 工具功能修復、標籤與 Prompt 驗證、以及標案系統頁面還原等關鍵任務，旨在確保核心功能於上線時穩定可靠。
globs: 
alwaysApply: false
---
# 🚀 上線前緊急任務追蹤清單 (Pre-Launch Task Plan)

## 🎯 總體目標
確保 Business Magnifier 專案在正式上線前，核心功能穩定、無重大錯誤，並提供可靠的使用者體驗。



---

## 📝 任務列表

### 1. 🚨【首要】修復 AI 工具詳細頁面 (AITool Detail Page)

- **目標**: 解決目前 95 個 AI 工具點擊後，詳細頁面 (`/aitool/detail/[toolId]`) 會報錯的問題，確保所有工具頁面皆能正常載入與運作。
- **狀態**: `已完成`
- **關鍵路由**: `/aitool/detail/[toolId]`
- **核心檔案**:
    - **頁面入口**: `next/src/app/aitool/detail/[toolId]/page.tsx`
    - **核心組件**: `next/src/components/aitool/AiToolDetail.tsx`
    - **通用模板**: `next/src/components/tools/common/PromptToolTemplate.tsx` (負責處理 Gemini API 互動)
    - **資料獲取**: `next/src/lib/aitool/apiHelpers.ts` (內的 `getToolById` 函式)
- **核心問題**:
    - **錯誤訊息**: `TypeError: (0 , ...getToolById) is not a function`
    - **根本原因**: 在伺服器元件 (`page.tsx`) 中，直接呼叫了被標記為用戶端模組 (`'use client'`) 內的 `getToolById` 函式。
- **子任務**:
    1.  **[已完成]** **效能優化**: 在 `page.tsx` 中，將獲取資料的方式從 `getToolsDataFromAPI` (獲取全部) 更改為 `getToolById` (根據 ID 獲取單一)。
    2.  **[已完成]** **修復 `'use client'` 衝突**:
        - **行動**: 建立一個新的伺服器端專用的資料獲取檔案 `next/src/lib/aitool/data.ts`。
        - **行動**: 將 `getToolById` 及其相依的輔助函式從 `apiHelpers.ts` 遷移至新的 `data.ts` 檔案中。
        - **行動**: 更新 `page.tsx`，使其從新的 `data.ts` 匯入 `getToolById`。
        - **原理**: 此舉能將伺服器端邏輯與用戶端邏輯分離，解決在伺服器元件中呼叫用戶端模組函式的問題。
    3.  **[已完成]** **驗證修復**: 重新啟動開發環境，抽樣測試數個 AI 工具詳細頁面，確認錯誤已消失且頁面正常渲染。
    4.  **[已完成]** **完整功能測試**: 確認頁面不僅能渲染，其內部的 Gemini API 互動功能也正常運作。



---

### 2. 🎨【優先】還原 AI 工具頁面 UI/UX

- **目標**: 審慎比對 `legacy` 與 `next` 專案的 AI 工具相關頁面，在保留 `next` 專案效能與 SEO 優勢的前提下，將前端 UI/UX 完美還原至 `legacy` 專案的視覺呈現。
- **狀態**: `已完成`
- **核心原則**:
    - **最小改動原則**: 只針對視覺還原進行必要修改，不對已優化的後端邏輯或 `next` 專案的架構進行不必要的改動。
    - **保留效能優勢**: 所有修改都不能犧牲 `next` 專案帶來的效能提升，如動態載入、圖片優化、非同步資料獲取等。
- **子任務**:
    1.  **還原 `/aitool/detail/[toolId]` 頁面 (結構與功能)**:
        - **[✔] D1. 還原 `instructions` 區塊**: `legacy` 版本會顯示「這是什麼？」、「為什麼需要？」、「如何使用？」的說明區塊。`next` 版本缺失此部分，需將其在工具組件上方重新渲染。
        - **[✔] D2. 還原雙按鈕外觀**: `legacy` 版本在輸入框下有「開始新對話」和「延續對話並優化」兩個功能不同的按鈕。`next` 版本只有一個「生成」按鈕。必須還原這兩個按鈕及其各自的功能邏輯。
        - **[✔] D3. 統一輸入框樣式**: 確保輸入框 (`textarea`) 的樣式、`placeholder` 文字與 `legacy` 版本一致。
        - **[✔] D4. 調整組件渲染邏輯**: `next` 版本錯誤地將 `PromptToolTemplate` 作為頁面主體。需調整渲染邏輯，使其僅作為互動核心（輸入框＋按鈕），並與 D1、D2 還原的 UI 元素正確組合。
        - **[✔] D5. 返回按鈕樣式**: 參照 `legacy` 的 `<BackButton>` 組件樣式，調整 `next` 版本按鈕外觀。
        - **[✔] D6. 主體與卡片動畫效果**: 統一將 `legacy` 的 `y: 20` 滑入動畫參數加入到 `next` 的 `AiToolDetail.tsx` 及其內容卡片中。
        - **[✔] D7. 圖示與標籤顏色一致性**: 檢查並確保 `next` 專案使用的 `categoryThemes` 所呈現的顏色與 `legacy` 的 `fullTagThemes` 完全相同。
        - **[✔] D8.【緊急】修復按鈕功能**: 還原後的「開始新對話」與「延續對話並優化」按鈕點擊後沒有反應，需修復其 `onClick` 事件處理函式，確保能正確觸發 Gemini API。

    2.  **還原 `/aitool/search` 頁面 (視覺與互動)**:
        - **[✔] S1. 工具卡片懸停效果**: 移植 `legacy` 版本中完整且豐富的懸停效果，包括 `hoveredTool` 狀態管理，以及對卡片邊框、陰影、圖示背景、文字和圖示顏色的同步變動。
        - **[✔] S2. 分類標籤按鈕樣式與動效**: 為 `next` 版本的標籤按鈕加上 `framer-motion` 的 `whileHover` 縮放動畫，並還原 `legacy` 的漸層色 (`gradient`) 選中樣式。
        - **[✔] S3. `FeatureSection` 組件**: 在 `AiToolSearch.tsx` 頁面底部加回 `legacy` 版本中存在的 `<FeatureSection />` 組件。
        - **[✔] S4. "無結果" 頁面樣式**: 檢查並確保 `next` 專案中的 `<NoSearchResults />` 組件或其替代方案，在視覺上與 `legacy` 的自訂 "無結果" 區塊完全一致。



---

### 3. 🏗️【架構重構】統一 AI 工具 Instructions 資料源

- **目標**: 移除所有 AI 工具範本中寫死的 (hardcoded) `Instructions` 內容，將其遷移至 MongoDB 資料庫，並確保所有工具的資料結構一致，以實現內容的統一管理與架構的單一化。
- **狀態**: `已完成`
- **核心問題**:
    - **不一致的資料源**: 通用型 AI 工具 (`PromptToolTemplate`) 的 `Instructions` 來自資料庫，而特定工具（如 `DepositCalculator.tsx`）的 `Instructions` 則寫死在組件中。
    - **資料庫欄位缺失**: 承上，特定工具在 `ai_tools` 集合中的文件缺少 `instructions` 欄位資料，導致 `AiToolDetail.tsx` 無法統一渲染。
    - **維護困難**: 內容分散在程式碼中，不易更新與管理。
- **子任務**:
    1.  **[已完成]** **[盤點]** 掃描 `next/src/components/tools/` 目錄下的所有子資料夾 (如 `finance`, `health`, `manufacturing` 等)，列出所有寫死 `<Instructions>` 元件內容的 AI 工具範本檔案。
    2.  **[已完成]** **[資料遷移]** 針對每一個被識別出的工具：
        - **行動**: 從範本檔案中提取 `what`, `why`, `how` 的字串內容。
        - **行動**: 建立或執行一個腳本 (`next/scripts/update-instructions.js`)，將提取出的 `instructions` 物件更新至 MongoDB `business-magnifier` 資料庫 `ai_tools` 集合中對應的工具文件 (document)。為此腳本在 `package.json` 中建立對應的 npm script (如 `db:update-instructions`)。
        - **驗證**: 確認 `ai_tools` 集合中所有工具文件的資料格式都包含一致的 `instructions` 欄位 (`{ what: string, why: string, how: string }`)。
    3.  **[已完成]** **[程式碼重構]**
        - **行動**: 修改所有在步驟 1 中識別出的 AI 工具範本檔案，移除內部寫死的 `<Instructions>` 組件。
        - **行動**: 確保 `next/src/components/aitool/AiToolDetail.tsx` 能為所有類型的 AI 工具（無論是通用型還是特定型）統一渲染來自資料庫的 `instructions` 內容。
    4.  **[已完成]** **[驗證]** 啟動應用程式，逐一訪問先前寫死內容的 AI 工具詳細頁面，確認 `Instructions` 區塊能正常顯示，且內容與原先一致。




---

### 4. 🚀【功能增強與修復】AI 工具搜尋引擎優化 (階段性開發)

- **目標**: 遵循階段性開發與測試策略，將 AI 工具搜尋功能從基礎錯誤修復到完整功能實現，逐步完成。此方法旨在降低除錯複雜性、確保每一步的穩定性，並最終提供一個功能完整、效能優良且可靠的搜尋引擎。
- **狀態**: `進行中`
- **核心原則**: 每個階段都是一個獨立的開發與測試循環。必須在當前階段的**驗收標準**被使用者確認通過後，才能進入下一個階段的開發。
- **關鍵檔案**:
    - **頁面組件**: `next/src/components/aitool/AiToolSearch.tsx`
    - **伺服器端資料函式**: `next/src/lib/aitool/data.ts`
    - **API 路由**: `next/src/app/api/aitool/route.ts`

---

#### **第一階段：基礎錯誤修復 (Baseline Error Fixing)**
- **目標**：修復所有已知的基礎錯誤，確保 AI 工具搜尋頁面的核心功能穩定可靠。
- **驗收標準**：
    - ✅ `hasToolSearchResults is not a function` 錯誤徹底消失。
    - ✅ GA 渲染警告 (`Cannot update a component while rendering a different component`) 已解決。
    - ✅ 點擊標籤或搜尋時，頁面功能正常，動畫流暢無卡頓。
    - ✅ 註解已全部中文化。
- **狀態**：`[x] 已完成 (Done)`

---

#### **第二階段：搜尋邏輯與資料庫整合重構 (Search Logic & DB Refactoring)**

此階段旨在徹底重構 AI 工具的搜尋功能，從一個寬泛的全文檢索，轉變為以 `name` 為核心、同時兼顧新手與專家使用情境的智慧型搜尋引擎。目標是提供快速、精準且符合使用者直覺的搜尋體驗。

- **狀態**: `[✅ 已完成]`
- **核心 API**: `next/src/app/api/aitool/route.ts`
- **核心資料邏輯**: `next/src/lib/aitool/data.ts` (`searchTools` function)
- **資料庫模型**: `next/src/lib/database/models/AITool.ts`

##### **[進度更新] 已完成的重構項目**
1.  **後端智慧搜尋**:
    - **[✔] 關鍵字處理**: 已在 `searchTools` 中實現了智慧型中英文斷詞、多分隔符號處理、以及簡繁關鍵字自動擴展。
    - **[✔] 混合搜尋模型**: 已使用 Aggregation Pipeline 實現了「OR 邏輯篩選 + 智慧評分排序」的混合搜尋。
    - **[✔] 索引優化**: 已將 `ai_tools` 集合的文字索引，從 `name` 和 `description` 的複合索引，修改為僅針對 `name` 的一般索引，以配合新的搜尋邏輯。
2.  **前端架構重構**:
    - **[✔] 後端驅動**: 已徹底重構 `AiToolSearch.tsx`，移除所有前端篩選邏輯，使其每次的搜尋/標籤點擊都即時向後端 API 發起請求。
    - **[✔] 防抖動機制**: 已為搜尋框的 `onChange` 事件加入了 300ms 的防抖動 (debounce) 機制，優化了使用者體驗與效能。
3.  **"AI" 標籤篩選修正**:
    - **[✔]** 已在 `searchTools` 中加入特殊邏輯，當使用者點擊 "AI" 標籤時，後端會正確查詢所有 `category` 為 "AI 工具" 的項目。

##### **[已知問題] 當前不穩定狀況**
- **搜尋框功能異常**: 搜尋框的行為仍不穩定，有時無法正確返回預期結果。
- **標籤篩選問題**: "AI" 標籤篩選雖然後端已修正，但前端互動似乎仍存在其他問題。
- **前端渲染**: 部分 UI 動畫效果與卡片高度在重構後出現非預期變化。
- **總結**: 由於架構改動較大，所有搜尋與篩選相關功能都需要開啟新對話進行**完整的迴歸測試**與後續修復。

##### **[文件] 排序邏輯詳解 (Sorting Logic Explained)**
為了方便後續開發與維護，特此記錄 AI 工具列表的兩種核心排序模式：

1.  **預設排序 (Default Sort)** - 當使用者**未輸入**任何搜尋關鍵字時觸發：
    - **排序規則**: `name: 1` (升序)
    - **作用**: 預設按 AI 工具的名稱進行排序 (A-Z, 或按筆畫)，提供一個穩定且可預測的列表。

2.  **智慧排序 (Smart Sort)** - 當使用者**輸入**搜尋關鍵字時觸發：
    - **第一序位: `score: -1` (降序)**
        - **作用**: 根據搜尋關鍵字與工具名稱的相關性進行智慧排序，分數高的在前。
    - **第二序位 (平手時): `name: 1` (升序)**
        - **作用**: 當 `score` 分數相同時，按工具名稱排序，確保結果穩定。
    - **`score` 計算規則**:
        - **基礎分**: 工具 `name` 每匹配到一個使用者輸入的關鍵字，`score +1`。
        - **精準匹配獎勵**: 若工具 `name` 的內容與使用者輸入的完整字串（忽略空格、標點與大小寫）完全相同，`score +10`。

---

##### **子任務：實現智慧型「OR + 權重排序」混合搜尋模型**

**核心理念**: 本次重構旨在取代傳統的 `$text` 全文檢索，解決「OR 搜尋結果太廣」與「AND 搜尋結果太少」的兩難困境。我們將採用一種混合模型：**以 OR 邏輯最大化召回率** (確保新手不遺漏結果)，**再透過智慧評分將最相關的結果排序至頂部** (滿足專家精準定位的需求)，並原生支援中英混合特性。

- **[後端] 關鍵字預處理與智慧斷詞**:
  - 在 `searchTools` 函式中，接收到使用者輸入的搜尋字串後，必須先進行標準化處理。
  - **智慧型中英文斷詞**: 使用 `query.replace(/([a-zA-Z0-9]+)([\u4e00-\u9fa5]+)/g, '$1 $2').replace(/([\u4e00-\u9fa5]+)([a-zA-Z0-9]+)/g, '$1 $2')` 在連續的英文/數字與中文字之間自動插入空格，以應對 `"AI工具"` 這類混合輸入。
  - **多分隔符號處理**: 基於上一步的結果，使用 `.split(/[\s,、;_.-]+/)` 來分割字串，統一處理各種分隔符號。
  - **簡繁關鍵字擴展**: 對分割後的每一個關鍵字，若為中文 (`/[\u4e00-\u9fa5]/.test(keyword)`), 使用 `opencc-js` 同時生成其簡體和繁體版本。最終形成一個包含所有簡繁變體的關鍵字集合。

- **[後端] 實施混合搜尋查詢**:
  - **基礎查詢 (OR Logic)**: 使用 MongoDB 的 `$or` 運算子，搭配不區分大小寫的 `$regex`，查詢 `name` 欄位中**包含擴展後關鍵字集合中任何一個詞**的 AI 工具。
  - **智慧評分與排序 (Aggregation Pipeline)**: 必須使用 MongoDB 的聚合管線來實現動態評分與排序。
    1.  **`$match`**: 執行上述的 OR 查詢。
    2.  **`$addFields`**: 新增 `score` 欄位，計算相關性分數。規則：使用者輸入的原始關鍵字（分割後、擴展前）有 N 個，`name` 欄位每匹配到一個，`score` 就 `+1`。
    3.  **`$addFields` (Bonus)**: 若 `name` 欄位（轉為小寫後）與使用者**未經處理的原始查詢**（僅 `trim()` 並轉為小寫後）完全相同，則給予大量額外分數（例如 `+10`），確保精準匹配的結果永遠在最頂端。
    4.  **`$sort`**: 依據 `score` 欄位進行降序 (`-1`) 排序。

---

#### **第三階段：擴大搜尋範圍與權重評分 (Expanded Search Scope & Weighted Scoring)**

**核心理念**: 在第二階段的智慧搜尋模型基礎上，將搜尋範圍從僅限 `name` 擴展至多個關鍵欄位，並引入「欄位權重」概念，使搜尋結果的相關性排序更加精準、智慧。

- **[後端] 定義可搜尋欄位與其權重**:
  - **目標欄位**: `name`, `description`, `tags`, `instructions.what`, `instructions.why`, `instructions.how`。
  - **權重規劃**:
    - `name`: 最高權重 (例如，匹配時 `score +5`)
    - `tags`, `instructions.what`: 次高權重 (例如，匹配時 `score +3`)
    - `description`, `instructions.why`, `instructions.how`: 一般權重 (例如，匹配時 `score +1`)

- **[後端] 重構 Aggregation Pipeline 以支援加權搜尋**:
  - **`$match` 階段**: 修改查詢邏輯，使其使用 `$or` 運算子，對所有目標欄位執行擴展後關鍵字的 `$regex` 匹配。
  - **`$addFields` (評分) 階段**:
    1. 移除原有的簡單計分邏輯。
    2. 重新設計計分規則，對每一個原始關鍵字，檢查它是否匹配了上述的目標欄位。
    3. 根據匹配到的欄位，為 `score` 加上對應的權重分數。
    4. 保留對「完全匹配原始查詢」的 `+10` 分額外獎勵。

#### **第四階段：部署前最終驗證與清理 (Final Validation & Cleanup)**

- **目標**: 在所有功能開發與測試完畢後，從資料庫中移除已確認廢棄的 `subCategory` 欄位。
- **狀態**: `未開始`
- **子任務**:
  1.  **[分析]** 確認 `subCategory` 欄位在整個專案中無任何引用。
  2.  **[資料庫]** 編寫並執行一個 MongoDB 更新腳本 (`db.ai_tools.updateMany({}, { $unset: { subCategory: "" } })`)，移除所有文件中的該欄位。
  3.  **[後端]** 從 `AITool` 的 Mongoose Schema 中移除 `subCategory` 的定義。

---

### 5. 🧪 驗證與優化 AI 工具的 Prompt 與標籤

- **目標**: 確保所有 AI 工具的 Prompt 和標籤內容準確無誤，且生成效果令人滿意，避免出現不相關或品質低落的回答。同時，規劃自動化測試流程。
- **狀態**: `未開始`
- **核心檔案**:
    - **資料模型**: `next/src/lib/database/models/AITool.ts` (定義 AI 工具的 Schema)
    - **測試腳本 (需建立)**: `next/scripts/test-ai-tools.js`
    - **npm 腳本設定**: `next/package.json`
- **子任務**:
    1.  **[手動驗證]** 逐一審查資料庫中 95 個 AI 工具的 `prompt` 和 `tags` 欄位，修正不恰當或錯誤的內容。
    2.  **[手動測試]** 手動測試每個 AI 工具，評估生成結果的品質。
    3.  **[自動化規劃]** 建立 `next/scripts/test-ai-tools.js` 腳本，用於自動化測試：
        - 腳本需能連接資料庫，遍歷所有 AI 工具。
        - 為每個工具設計一個或多個標準的測試輸入 (Test Case)。
        - 呼叫 Gemini API 執行測試，並記錄結果。
        - (可選) 設計基本的結果驗證機制，例如檢查回應是否為空、是否包含錯誤訊息等。
    4.  **[整合]** 在 `next/package.json` 的 `scripts` 中新增指令 (如 `"test:aitools": "node scripts/test-ai-tools.js"`)，方便執行自動化測試。



---

### 6. 🏗️ 還原標案詳細頁面樣式與資料流

- **目標**: 確保新版 (`next`) 專案中的標案詳細頁面，其資料流處理、前端呈現及整體樣式，能最大程度地還原 `legacy` 專案的設計。
- **狀態**: `未開始`
- **關鍵路由**: `/tender/detail/[tenderId]`
- **核心檔案**:
    - **Next.js 版本**:
        - **頁面入口**: `next/src/app/tender/detail/[tenderId]/page.tsx`
        - **核心組件**: `next/src/components/tender/TenderDetail.tsx`
        - **子組件**: `next/src/components/tender/detail/*`
    - **Legacy 參考版本**:
        - **核心組件**: `legacy/src/components/tender/TenderDetail.tsx`
        - **子組件**: `legacy/src/components/tender/detail/*`
- **子任務**:
    1.  **[分析]** 詳細比對 `legacy` 與 `next` 專案中相關檔案的程式碼，梳理出資料結構、API 呼叫方式、及組件渲染邏輯的差異。
    2.  **[實作]** 調整 `next` 專案的 `