---
description: **描述**: Next.js 專案架構思路與開發慣例指南，專注於目錄組織、頁面路由、API 定義方式和既有實現複刻原則。強調架構一致性和 SEO 優化整合，提供新功能開發時的參照標準。  **觸發條件**: - Next.js 專案架構設計和組織規劃 - 新頁面或功能開發時的實現參照 - 目錄結構和檔案命名規範問題 - App Router 路由設計和 API 結構規劃 - 元件組織和複用策略制定 - 既有功能的實現方式查詢 - 開發流程和一致性原則確立  **關鍵詞**: `Next.js架構`, `目錄組織`, `路由設計`, `API定義`, `既有實現複刻`, `架構一致性`, `開發慣例`, `SEO整合`, `元件組織`, `開發流程`
globs: 
alwaysApply: false
---
# Next.js 專案開發慣例與架構思路

## 專案定位與核心理念

Business Magnifier 專案採用 Next.js 14 App Router 架構，專注於 SEO 優化的企業資料查詢平台。開發慣例強調**架構一致性**和**既有實現複刻**原則，確保新功能開發時能參照現有頁面的實現方式，維持專案的整體性和可維護性。

## 目錄結構與組織原則

### 根目錄架構思路
```
Business Magnifier/
├── next/                    # 主要 Next.js 應用程式 (重構目標)
├── legacy/                  # Vite 舊版本 (漸進式淘汰)
└── .cursor/                 # AI 助手配置與規則
```

**核心思路**: 漸進式遷移策略，最終完全遷移至 `next/` 專案，`legacy/` 為過渡期存在。

### Next.js 專案內部組織 (next/)

#### 1. 源碼目錄結構 (src/)
```
src/
├── app/                    # App Router 頁面與 API
├── components/             # React 元件庫
├── lib/                   # 核心工具函式庫
├── hooks/                 # 自定義 React Hooks
├── types/                 # TypeScript 型別定義
├── utils/                 # 通用工具函式
├── data/                  # 靜態資料與配置
└── config/                # 應用程式配置
```

**組織思路**: 按功能職責分層，確保程式碼職責清晰且易於維護。

#### 2. App Router 頁面架構 (src/app/)
```
app/
├── page.tsx               # 首頁 (重定向到企業搜尋)
├── layout.tsx             # 根版面配置
├── loading.tsx            # 全域載入狀態
├── globals.css            # 全域樣式
├── company/               # 企業查詢功能模組
│   ├── search/           # 企業搜尋頁面
│   └── [id]/            # 企業詳情頁面
├── tender/                # 標案查詢功能模組
├── aitool/                # AI 工具功能模組
├── api/                   # API 路由
│   ├── company/          # 企業相關 API
│   └── feedback/         # 回饋相關 API
├── faq/                   # 常見問題頁面
├── privacy/               # 隱私政策頁面
└── feedback/              # 使用者回饋頁面
```

**路由思路**: 採用功能模組化組織，每個主要功能 (company, tender, aitool) 獨立成模組，便於維護和擴展。

## 頁面與路由定義慣例

### 1. 頁面檔案命名規範
- **頁面入口**: `page.tsx` (App Router 標準)
- **版面配置**: `layout.tsx` (共享版面)
- **載入狀態**: `loading.tsx` (載入中顯示)
- **錯誤處理**: `error.tsx` (錯誤邊界)
- **未找到**: `not-found.tsx` (404 頁面)

### 2. 路由結構設計思路

#### 靜態路由範例
```
/                          # 首頁 (重定向)
/company/search            # 企業搜尋頁面
/tender/search             # 標案搜尋頁面
/aitool                    # AI 工具主頁
/faq                       # 常見問題
/privacy                   # 隱私政策
/feedback                  # 使用者回饋
```

#### 動態路由範例
```
/company/[id]              # 企業詳情頁面
/tender/[id]               # 標案詳情頁面
/aitool/[toolType]         # 特定 AI 工具頁面
```

**設計思路**: URL 結構清晰且 SEO 友善，符合使用者直覺和搜尋引擎偏好。

### 3. 渲染策略選擇原則

根據頁面特性選擇適當的渲染方式：

- **SSG (靜態生成)**: 首頁、FAQ、隱私政策等靜態內容
- **ISR (增量靜態再生)**: 熱門企業/標案詳情頁
- **SSR (伺服器端渲染)**: 搜尋結果頁、實時資料頁面
- **CSR (客戶端渲染)**: 高互動性組件、使用者特定功能

**選擇思路**: 優先考慮 SEO 需求，其次考慮效能和使用者體驗。

## API 路由定義慣例

### 1. API 目錄結構 (src/app/api/)
```
api/
├── company/
│   ├── route.ts           # GET /api/company (企業列表)
│   ├── [id]/
│   │   └── route.ts       # GET /api/company/[id] (企業詳情)
│   └── search/
│       └── route.ts       # POST /api/company/search (企業搜尋)
├── tender/
│   ├── route.ts           # GET /api/tender (標案列表)
│   └── [id]/
│       └── route.ts       # GET /api/tender/[id] (標案詳情)
└── feedback/
    └── route.ts           # POST /api/feedback (提交回饋)
```

### 2. API 設計思路

#### RESTful 原則
- **GET**: 資料查詢
- **POST**: 資料建立或複雜查詢
- **PUT/PATCH**: 資料更新
- **DELETE**: 資料刪除

#### 回應格式統一
```typescript
// 成功回應格式
{
  success: true,
  data: T,
  message?: string
}

// 錯誤回應格式
{
  success: false,
  error: string,
  code?: string
}
```

**設計思路**: 統一的 API 介面設計，便於前端處理和錯誤管理。

## 元件組織與複用原則

### 1. 元件目錄結構 (src/components/)
```
components/
├── ui/                    # 基礎 UI 元件 (Button, Input, Modal 等)
├── layout/                # 版面配置元件 (Header, Footer, Sidebar)
├── business/              # 企業相關元件 (BusinessCard, BusinessList)
├── charts/                # 圖表元件 (BarChart, PieChart)
├── forms/                 # 表單元件 (SearchForm, FeedbackForm)
├── seo/                   # SEO 相關元件 (MetaTags, StructuredData)
└── common/                # 通用元件 (Loading, ErrorBoundary)
```

### 2. 元件設計思路

#### 複用性原則
- **基礎元件**: 高度可複用，無業務邏輯
- **業務元件**: 特定功能，可在相似場景複用
- **頁面元件**: 特定頁面專用，不強求複用

#### 既有實現複刻原則
新功能開發時，優先參照現有相似功能的實現方式：
- 查看現有的企業卡片元件實現方式
- 參照現有的搜尋表單設計模式
- 複用現有的載入狀態和錯誤處理邏輯

**核心思路**: 保持設計一致性，降低學習成本，提高開發效率。

## 資料管理與狀態處理

### 1. 資料層組織 (src/lib/)
```
lib/
├── db/                    # 資料庫連接與模型
├── api/                   # API 客戶端封裝
├── auth/                  # 身份驗證邏輯
├── utils/                 # 工具函式
└── constants/             # 常數定義
```

### 2. 狀態管理思路

#### 本地狀態
- 使用 React Hooks (useState, useReducer)
- 適用於元件內部狀態

#### 伺服器狀態
- 使用 SWR 或 React Query
- 適用於 API 資料快取和同步

#### 全域狀態
- 使用 Context API 或 Zustand
- 適用於跨元件共享的狀態

**管理思路**: 根據狀態的作用範圍和複雜度選擇適當的管理方式。

## 開發流程與最佳實踐

### 1. 新功能開發流程

1. **需求分析**: 確定功能範圍和 SEO 需求
2. **架構設計**: 選擇適當的渲染策略和路由結構
3. **既有參照**: 查找相似功能的現有實現
4. **元件設計**: 設計可複用的元件結構
5. **API 設計**: 定義清晰的 API 介面
6. **實現開發**: 按照既有模式進行開發
7. **測試驗證**: 確保功能正常和 SEO 效果

### 2. 程式碼一致性原則

#### 檔案命名
- **元件**: PascalCase (BusinessCard.tsx)
- **頁面**: kebab-case (page.tsx, layout.tsx)
- **工具**: camelCase (formatDate.ts)
- **常數**: UPPER_SNAKE_CASE (API_ENDPOINTS.ts)

#### 匯入順序
1. React 相關匯入
2. 第三方函式庫
3. 內部元件和工具
4. 型別定義
5. 樣式檔案

**一致性思路**: 統一的程式碼風格降低認知負擔，提高程式碼可讀性。

## SEO 優化整合思路

### 1. 頁面 SEO 結構
每個頁面都應包含：
- 動態 meta 標籤
- 結構化資料標記
- 適當的標題層級 (H1, H2, H3)
- 內部連結優化
- 圖片 alt 屬性

### 2. 效能優化考量
- 圖片懶載入和優化
- 程式碼分割和懶載入
- 快取策略實施
- Core Web Vitals 優化

**整合思路**: SEO 優化不是額外功能，而是開發過程中的內建考量。

## 部署與環境管理

### 1. 環境配置
- **開發環境**: 本地開發和測試
- **預覽環境**: Netlify 預覽部署
- **生產環境**: 正式線上環境

### 2. 建置流程
- 開發建置: `npm run dev`
- 生產建置: `build-prod.sh` 腳本
- 部署: Netlify 自動部署

**管理思路**: 簡化部署流程，確保環境一致性。

## 總結

這份開發慣例文件重點在於建立清晰的架構思路和組織原則，而非具體的程式碼實現細節。核心理念是：

1. **架構一致性**: 統一的目錄結構和命名規範
2. **既有實現複刻**: 新功能參照現有實現方式
3. **SEO 優先**: 開發過程中內建 SEO 考量
4. **漸進式改進**: 持續優化而非一次性重構

當開發新功能時，應優先查看現有相似功能的實現方式，保持專案的整體一致性和可維護性。