---
description: **描述**: 完整的 MongoDB 遷移實施指南，涵蓋從 PostgreSQL + Prisma 到 MongoDB + Mongoose 的架構遷移策略、本地開發環境建置、Docker 容器化部署、AI 工具資料遷移、資料模型設計和效能優化配置。提供從環境準備到生產部署的系統性解決方案，專注於 JSON 原生支援和靈活 Schema 設計。  **觸發條件**:  - PostgreSQL 轉 MongoDB 資料庫遷移需求  - Prisma 轉 Mongoose ODM 架構重構  - 本地 MongoDB 開發環境建置  - Docker 容器化資料庫部署  - AI 工具資料遷移和管理  - NoSQL 資料模型設計和優化  - MongoDB 索引策略和效能調優  - 資料庫連線管理和錯誤處理  - 企業資料和標案資料結構設計  - RAG 功能向量搜尋準備  **關鍵詞**: `MongoDB遷移`, `Prisma轉Mongoose`, `本地開發環境`, `Docker容器化`, `AI工具遷移`, `NoSQL設計`, `資料模型`, `索引優化`, `連線管理`, `向量搜尋`
globs: 
alwaysApply: false
---
# MongoDB 遷移指南 🚀

本指南將協助您從 PostgreSQL + Prisma 架構遷移到 MongoDB + Mongoose 架構。

## 📋 遷移概述

### 為什麼選擇 MongoDB？

1. **JSON 原生支援** - 企業資料、標案資料本身就是 JSON 格式
2. **靈活的 Schema** - 適應不同企業的資料結構差異
3. **水平擴展** - 支援未來 RAG 功能的向量搜尋
4. **開發效率** - 減少 JSON ↔ 關聯式表格的轉換成本

### 遷移範圍

- ✅ **AI 工具資料** - 5960 行 promptTools.ts → MongoDB
- ✅ **企業資料模型** - 支援完整的企業資訊結構
- ✅ **標案資料模型** - 標案查詢和管理
- ✅ **使用者回饋** - 回饋收集和分析

## 🛠️ 遷移步驟

### 第一步：環境準備

#### 1.1 安裝 MongoDB

**本地開發環境：**
```bash
# macOS (使用 Homebrew)
brew tap mongodb/brew
brew install mongodb-community

# Windows (使用 Chocolatey)
choco install mongodb

# Ubuntu/Debian
sudo apt-get install mongodb

# 啟動 MongoDB 服務
sudo systemctl start mongod
```

**雲端環境 (推薦)：**
1. 註冊 [MongoDB Atlas](mdc:https:/www.mongodb.com/cloud/atlas)
2. 建立免費叢集 (512MB 免費額度)
3. 設定網路存取和資料庫使用者
4. 取得連線字串

#### 1.2 更新專案依賴

```bash
cd next

# 移除 Prisma 相關套件
npm uninstall @prisma/client prisma

# 安裝 MongoDB 相關套件
npm install mongoose@^8.0.3
npm install --save-dev @types/mongoose
```

#### 1.3 環境變數設定

建立 `.env.local`：
```env
# MongoDB 連線 (本地)
MONGODB_URI=mongodb://localhost:27017/business-magnifier

# MongoDB 連線 (Atlas 雲端)
# MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/business-magnifier

# 其他環境變數...
GOOGLE_AI_API_KEY=your_api_key
NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your_maps_key
JWT_SECRET=your_jwt_secret
```

### 第二步：資料庫架構建立

#### 2.1 連線設定

檔案已建立：`src/lib/database/connection.ts`
- ✅ 連線池管理
- ✅ 錯誤處理
- ✅ 自動重連機制

#### 2.2 資料模型定義

**企業模型** (`src/lib/database/models/Company.ts`)：
```typescript
// 支援完整的企業資訊結構
interface ICompany {
  taxId: string;           // 統一編號
  name: string;            // 公司名稱
  financial: {...};       // 財務資訊
  contact: {...};          // 聯絡資訊
  directors: [...];        // 董監事
  businessScope: [...];    // 營業項目
  // ... 更多欄位
}
```

**AI 工具模型** (`src/lib/database/models/AITool.ts`)：
```typescript
// AI 工具定義和使用統計
interface IAITool {
  id: string;
  name: string;
  config: {
    instructions: {...};
    promptTemplate: {...};
  };
  usage: {
    totalUses: number;
    popularityScore: number;
  };
  // ... 更多欄位
}
```

### 第三步：資料遷移執行

#### 3.1 AI 工具遷移

```bash
# 執行完整的 AI 工具遷移
npm run migrate:aitools

# 或手動執行
npx ts-node src/lib/database/migration/migrateAITools.ts
```

遷移過程包含：
1. **資料轉換** - promptTools.ts → MongoDB 文檔
2. **分類推斷** - 自動分類 AI 工具
3. **索引建立** - 搜尋和效能優化
4. **驗證檢查** - 確保資料完整性

#### 3.2 遷移結果驗證

```bash
# 檢查遷移結果
node -e "
const { validateMigration } = require('./src/lib/database/migration/migrateAITools.ts');
validateMigration();
"
```

預期輸出：
```
📊 資料庫統計:
- 總工具數: 150+
- 啟用工具數: 150+
- 原始工具數: 150+

📈 分類分布:
- 提示詞: 45 個工具
- 寫作: 32 個工具
- 商業: 28 個工具
- ...

✅ 沒有發現重複的工具 ID
```

### 第四步：API 路由更新

#### 4.1 移除 Prisma 相關程式碼

```bash
# 搜尋並替換 Prisma 相關引用
grep -r "prisma" src/ --include="*.ts" --include="*.tsx"
```

#### 4.2 更新 API 路由

**企業 API 範例**：
```typescript
// src/app/api/company/[id]/route.ts
import connectToDatabase from '@/lib/database/connection';
import Company from '@/lib/database/models/Company';

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    await connectToDatabase();
    
    const company = await Company.findByTaxId(params.id);
    
    if (!company) {
      return NextResponse.json({ error: '企業不存在' }, { status: 404 });
    }
    
    return NextResponse.json(company);
  } catch (error) {
    return NextResponse.json({ error: '查詢失敗' }, { status: 500 });
  }
}
```

**AI 工具 API 範例**：
```typescript
// src/app/api/aitool/route.ts
import AITool from '@/lib/database/models/AITool';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const category = searchParams.get('category');
  const query = searchParams.get('q');
  
  const tools = await AITool.searchTools(query || '', { category });
  return NextResponse.json(tools);
}
```

### 第五步：前端元件更新

#### 5.1 更新資料獲取邏輯

```typescript
// 舊版 (Prisma)
const company = await prisma.company.findUnique({
  where: { uniformNumber: taxId }
});

// 新版 (MongoDB)
const company = await Company.findByTaxId(taxId);
```

#### 5.2 更新型別定義

```typescript
// src/types/database.ts
export interface CompanyDocument extends ICompany {
  _id: string;
  displayName: string;  // 虛擬欄位
  isListed: boolean;    // 虛擬欄位
}
```

### 第六步：索引優化

#### 6.1 建立搜尋索引

```javascript
// MongoDB Shell 指令
db.companies.createIndex({ "taxId": 1 }, { unique: true })
db.companies.createIndex({ "name": "text", "fullName": "text" })
db.companies.createIndex({ "searchKeywords": 1 })

db.aitools.createIndex({ "id": 1 }, { unique: true })
db.aitools.createIndex({ "category": 1, "isActive": 1 })
db.aitools.createIndex({ "usage.popularityScore": -1 })
```

#### 6.2 效能監控

```typescript
// 啟用 MongoDB 查詢分析
mongoose.set('debug', process.env.NODE_ENV === 'development');
```

## 🧪 測試與驗證

### 測試清單

- [ ] **連線測試** - MongoDB 連線正常
- [ ] **資料遷移** - AI 工具資料完整遷移
- [ ] **API 功能** - 所有 API 路由正常運作
- [ ] **搜尋功能** - 企業和 AI 工具搜尋正常
- [ ] **效能測試** - 查詢速度符合預期

### 測試指令

```bash
# 連線測試
npm run test:db-connection

# API 測試
npm run test:api

# 整合測試
npm run test:integration
```

## 🚀 部署指南

### Netlify 部署

1. **環境變數設定**：
   ```
   MONGODB_URI=mongodb+srv://...
   GOOGLE_AI_API_KEY=...
   NODE_ENV=production
   ```

2. **建置設定**：
   ```toml
   # netlify.toml
   [build]
     command = "npm run build"
     publish = ".next"
   
   [[plugins]]
     package = "@netlify/plugin-nextjs"
   ```

### Vercel 部署

```bash
# 安裝 Vercel CLI
npm i -g vercel

# 部署
vercel --prod

# 設定環境變數
vercel env add MONGODB_URI
```

## 📊 效能優化建議

### 1. 索引策略

```javascript
// 複合索引 - 提升複雜查詢效能
db.companies.createIndex({ 
  "industry": 1, 
  "financial.paidInCapital": -1 
})

// 文字搜尋索引 - 提升搜尋效能
db.companies.createIndex({
  "name": "text",
  "fullName": "text",
  "searchKeywords": "text"
})
```

### 2. 查詢優化

```typescript
// 使用投影減少資料傳輸
const companies = await Company.find(query)
  .select('taxId name address financial.paidInCapital')
  .limit(20);

// 使用聚合管道進行複雜查詢
const stats = await Company.aggregate([
  { $match: { status: '核准設立' } },
  { $group: { _id: '$industry', count: { $sum: 1 } } },
  { $sort: { count: -1 } }
]);
```

### 3. 快取策略

```typescript
// Redis 快取 (可選)
import Redis from 'ioredis';

const redis = new Redis(process.env.REDIS_URL);

// 快取熱門查詢
const cacheKey = `company:${taxId}`;
let company = await redis.get(cacheKey);

if (!company) {
  company = await Company.findByTaxId(taxId);
  await redis.setex(cacheKey, 3600, JSON.stringify(company));
}
```

## 🔧 故障排除

### 常見問題

**1. 連線失敗**
```
Error: MongoNetworkError: failed to connect to server
```
解決方案：
- 檢查 `MONGODB_URI` 是否正確
- 確認網路連線和防火牆設定
- 檢查 MongoDB Atlas 白名單設定

**2. 索引建立失敗**
```
Error: Index with name already exists
```
解決方案：
```javascript
// 刪除現有索引
db.companies.dropIndex("name_text_fullName_text")
// 重新建立索引
db.companies.createIndex({ "name": "text", "fullName": "text" })
```

**3. 記憶體使用過高**
```
Error: JavaScript heap out of memory
```
解決方案：
```bash
# 增加 Node.js 記憶體限制
NODE_OPTIONS="--max-old-space-size=4096" npm run dev
```

### 監控和日誌

```typescript
// 啟用詳細日誌
mongoose.set('debug', true);

// 監控慢查詢
mongoose.connection.on('slow', (query) => {
  console.warn('慢查詢:', query);
});
```

## 📈 未來擴展

### RAG 功能準備

```typescript
// AI 工具向量化 (未來功能)
interface IAITool {
  // ... 現有欄位
  embedding?: number[];  // 768 維向量
  semanticTags?: string[]; // 語義標籤
}

// 向量搜尋 (MongoDB Atlas Vector Search)
const similarTools = await AITool.aggregate([
  {
    $vectorSearch: {
      index: "vector_index",
      path: "embedding",
      queryVector: userQueryVector,
      numCandidates: 100,
      limit: 10
    }
  }
]);
```

### 分析功能

```typescript
// 使用統計分析
const popularTools = await AITool.aggregate([
  { $match: { isActive: true } },
  { $sort: { "usage.totalUses": -1 } },
  { $limit: 10 }
]);

// 企業資料分析
const industryStats = await Company.aggregate([
  { $group: { 
    _id: "$industry", 
    count: { $sum: 1 },
    avgCapital: { $avg: "$financial.paidInCapital" }
  }}
]);
```

## ✅ 遷移檢查清單

- [ ] MongoDB 環境建置完成
- [ ] 依賴套件更新完成
- [ ] 資料模型建立完成
- [ ] AI 工具資料遷移完成
- [ ] API 路由更新完成
- [ ] 前端元件更新完成
- [ ] 索引建立完成
- [ ] 測試通過
- [ ] 部署設定完成
- [ ] 效能監控設定完成

---

🎉 **恭喜！您已成功完成 MongoDB 遷移！**



現在您可以享受 MongoDB 帶來的靈活性和效能優勢，特別是在處理 JSON 資料和未來的 RAG 功能擴展方面。